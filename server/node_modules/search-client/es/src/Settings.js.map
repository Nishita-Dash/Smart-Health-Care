{"version":3,"file":"Settings.js","sourceRoot":"","sources":["../../src/Settings.ts"],"names":[],"mappings":";AAAA,OAAO,EACH,sBAAsB,EAEzB,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,oBAAoB,EAAyB,MAAM,gBAAgB,CAAC;AAC7E,OAAO,EAAE,kBAAkB,EAAuB,MAAM,cAAc,CAAC;AACvE,OAAO,EAAU,KAAK,EAAE,MAAM,UAAU,CAAC;AACzC,OAAO,EAAE,YAAY,EAAiB,MAAM,QAAQ,CAAC;AAwCrD;;;;GAIG;AACH;IAqCI;;;OAGG;IACH,kBAAY,QAA4B;QACpC,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YAC9B,QAAQ,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;SACpC;QAED,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;QAEhC,IAAI,CAAC,QAAQ;YACT,OAAO,QAAQ,CAAC,QAAQ,KAAK,WAAW;gBACpC,CAAC,CAAC,QAAQ,CAAC,QAAQ;gBACnB,CAAC,CAAC,gBAAgB,CAAC;QAE3B,8FAA8F;QAC9F,IAAI,MAAM,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;QAChE,IACI,QAAQ,CAAC,cAAc;YACvB,OAAO,QAAQ,CAAC,cAAc,CAAC,QAAQ,KAAK,WAAW,EACzD;YACE,QAAQ,CAAC,cAAc,CAAC,QAAQ,GAAG,EAAE,CAAC;SACzC;QAED,IAAI,CAAC,cAAc,GAAG,IAAI,sBAAsB,uBACzC,MAAM,GACN,QAAQ,CAAC,cAAc,EAC5B,CAAC;QACH,IAAI,CAAC,YAAY,GAAG,IAAI,oBAAoB,uBACrC,MAAM,GACN,QAAQ,CAAC,YAAY,EAC1B,CAAC;QACH,IAAI,CAAC,UAAU,GAAG,IAAI,kBAAkB,uBACjC,MAAM,GACN,QAAQ,CAAC,UAAU,EACxB,CAAC;QACH,IAAI,CAAC,IAAI,GAAG,IAAI,YAAY,uBAAM,MAAM,GAAK,QAAQ,CAAC,IAAI,EAAG,CAAC;QAC9D,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC;IACL,eAAC;AAAD,CAAC,AA7ED,IA6EC","sourcesContent":["import {\r\n    AuthenticationSettings,\r\n    IAuthenticationSettings\r\n} from \"./Authentication\";\r\nimport { AutocompleteSettings, IAutocompleteSettings } from \"./Autocomplete\";\r\nimport { CategorizeSettings, ICategorizeSettings } from \"./Categorize\";\r\nimport { IQuery, Query } from \"./Common\";\r\nimport { FindSettings, IFindSettings } from \"./Find\";\r\n\r\nexport interface ISettings {\r\n    /**\r\n     * The JWT authentication token to use.\r\n     */\r\n    authentication?: IAuthenticationSettings;\r\n\r\n    /**\r\n     * Settings for autocomplete().\r\n     */\r\n    autocomplete?: IAutocompleteSettings;\r\n\r\n    /**\r\n     * Settings for categorize().\r\n     */\r\n    categorize?: ICategorizeSettings;\r\n\r\n    /**\r\n     * Settings for find().\r\n     */\r\n    find?: IFindSettings;\r\n\r\n    /**\r\n     * You can use this path to override the path to the rest-service.\r\n     * If not set, it will default to \"RestService/v4\".\r\n     */\r\n    basePath?: string;\r\n\r\n    /**\r\n     * Settings for the common query (autocomplete/find/categorize)\r\n     */\r\n    query?: IQuery;\r\n\r\n    /**\r\n     * BaseUrl for the SearchClient service (can be overriden in specific services)\r\n     */\r\n    baseUrl?: string;\r\n}\r\n\r\n/**\r\n * Settings as used by the SearchClient.\r\n *\r\n * Please see the data-type description for each property in question.\r\n */\r\nexport class Settings implements ISettings {\r\n    /**\r\n     * The JWT authentication token to use.\r\n     */\r\n    public authentication?: IAuthenticationSettings;\r\n\r\n    /**\r\n     * Settings for autocomplete().\r\n     */\r\n    public autocomplete?: IAutocompleteSettings;\r\n\r\n    /**\r\n     * Settings for categorize().\r\n     */\r\n    public categorize?: ICategorizeSettings;\r\n\r\n    /**\r\n     * Settings for find().\r\n     */\r\n    public find?: IFindSettings;\r\n\r\n    /**\r\n     * You can use this path to override the path to the rest-service.\r\n     * Default: RestService/v4\r\n     */\r\n    public basePath?: string;\r\n\r\n    /**\r\n     * Settings for the common query (autocomplete/find/categorize)\r\n     */\r\n    public query?: IQuery;\r\n\r\n    /**\r\n     * BaseUrl for the SearchClient service (can be overridden in specific services)\r\n     */\r\n    public baseUrl?: string;\r\n\r\n    /**\r\n     * Creates a Settings object for you, based on Settings defaults and the overrides provided as a param.\r\n     * @param settings - The settings defined here will override the default Settings.\r\n     */\r\n    constructor(settings: ISettings | string) {\r\n        if (typeof settings === \"string\") {\r\n            settings = { baseUrl: settings };\r\n        }\r\n\r\n        this.baseUrl = settings.baseUrl;\r\n\r\n        this.basePath =\r\n            typeof settings.basePath !== \"undefined\"\r\n                ? settings.basePath\r\n                : \"RestService/v4\";\r\n\r\n        // The baseUrl is to be used by all services, unless they have a specified baseUrl themselves.\r\n        let common = { basePath: this.basePath, baseUrl: this.baseUrl };\r\n        if (\r\n            settings.authentication &&\r\n            typeof settings.authentication.basePath === \"undefined\"\r\n        ) {\r\n            settings.authentication.basePath = \"\";\r\n        }\r\n\r\n        this.authentication = new AuthenticationSettings({\r\n            ...common,\r\n            ...settings.authentication\r\n        });\r\n        this.autocomplete = new AutocompleteSettings({\r\n            ...common,\r\n            ...settings.autocomplete\r\n        });\r\n        this.categorize = new CategorizeSettings({\r\n            ...common,\r\n            ...settings.categorize\r\n        });\r\n        this.find = new FindSettings({ ...common, ...settings.find });\r\n        this.query = new Query(settings.query);\r\n    }\r\n}\r\n"]}