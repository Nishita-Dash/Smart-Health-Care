{"version":3,"file":"SearchClient.js","sourceRoot":"","sources":["../../src/SearchClient.ts"],"names":[],"mappings":"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","sourcesContent":["import deepEqual from \"deep-equal\";\nimport clone from 'clone';\n\nexport * from \"./Authentication\";\nexport * from \"./Autocomplete\";\nexport * from \"./Categorize\";\nexport * from \"./Common\";\nexport * from \"./Data\";\nexport * from \"./Find\";\nexport * from \"./Settings\";\n\nimport { AuthToken, Authentication, AuthenticationFactory } from \"./Authentication\";\nimport { Autocomplete } from \"./Autocomplete\";\nimport { Categorize } from \"./Categorize\";\nimport {\n    DateSpecification,\n    Fetch,\n    Filter,\n    IQuery,\n    Query,\n    OrderBy,\n    SearchType,\n    CategoryPresentation,\n    CategorizationType\n} from \"./Common\";\nimport { ICategory, IGroup } from \"./Data\";\nimport { Find } from \"./Find\";\nimport { Settings, ISettings } from \"./Settings\";\n\n/**\n * This is the \"main class\" of this package. Please read the <a href=\"https://the-haive.github.io/search-client/\">getting-started section</a>\"\n * for a proper introduction.\n *\n * The SearchClient manages a range of other services:\n *   * Authentication,\n *   * Autocomplete,\n *   * Categorize\n *   * Find\n *\n * Each of the above services can be used independently, but it is highly recommended to use the SearchClient instead.\n *\n * The SearchClient allows you to have an advanced search with minimal effort in regards to setup and logics. instead\n * of having to write all the logics yourself the SearchClient exposes the following methods for managing your search:\n *   1. Configure callbacks in your settings-object that you pass to the SearchClient.\n *   2. Configure triggers to define when to do server-lookups and not (if you need to deviate from the defaults)\n *   3. Set query-values real-time (queryText, filters, date-ranges, etc.)\n *   4. Receive autocomplete-suggestions, matches and categories in your callback handlers when the data is available.\n *\n * What happens is that any query-changes that arrive are checked in regards to trigger-settings. If they are to trigger\n * and a callback has been set up then the server is requested and when the data is received it is sent to the callback\n * registered in the settings-object.\n */\nexport class SearchClient implements AuthToken {\n    /**\n     * Holds a reference to the setup Authentication service.\n     */\n    public authentication: Authentication = undefined;\n\n    /**\n     * Holds a reference to the setup Autocomplete service.\n     */\n    public autocomplete: Autocomplete = undefined;\n\n    /**\n     * Holds a reference to the setup Categorize service.\n     */\n    public categorize: Categorize = undefined;\n\n    /**\n     * Holds a reference to the setup Find service.\n     */\n    public find: Find = undefined;\n\n    /**\n     * Holds a reference to method resolving jwt access token.\n     */\n    public tokenResolver: () => string;\n\n    protected settings: ISettings;\n\n    // tslint:disable-next-line:variable-name\n    private _query: Query;\n\n    private _origSettings: ISettings | string;\n    private _origFetchMethod: Fetch;\n\n    /**\n     * Holds a reference to the currently set authentication token.\n     */\n    get authenticationToken(): string {\n        return this.tokenResolver();\n    }\n\n    /**\n     * Creates a SearchClient instance using the supplied settings object. Please see <a href=\"https://the-haive.github.io/search-client/\">getting-started section</a>\n     * for an introduction on how to set up the instance.\n     *\n     * @param settings A settings object that indicates how the search-client instance is to behave.\n     */\n    constructor(settings: ISettings | string, fetchMethod?: Fetch) {\n        this.setup(settings, fetchMethod);\n        this.tokenResolver = () => \"\";\n    }\n\n    /**\n     * This method is typically called when the user clicks the search-button in the UI.\n     *\n     * For query-fields that accepts enter the default queryChangeInstantRegex catches enter.\n     * When they don't take enter you will have to set up something that either catches the default enter or a user clicks\n     * on a \"Search\"-button or similar. You can choose to use the already current query, or you can pass it in. If you\n     * include the query then the internal updates are suppressed while changing the query-properties, to make sure that\n     * only one update per service is made (if any of their trigger-checks returned true).\n     *\n     * @param query If passed in then the query object will update the internal query-object and any updates will trigger\n     * (but only once). The consecutive overriding service params are ignored when this parameter has a value. If the\n     * query is empty/null/undefined then the services will force an update, but allows the bool params to override this.\n     * @param autocomplete Allows turning off updates for the Autocomplete service (if the service is enabled in the\n     * settings). Only effective when query is not set.\n     * @param categorize Allows turning off updates for the Categorize service (if the service is enabled in the settings).\n     * Only effective when query is not set.\n     * @param find Allows turning off updates for the Find service (if the service is enabled in the settings). Only\n     * effective when query is not set.\n     */\n    public update(\n        query?: IQuery,\n        autocomplete: boolean = true,\n        categorize: boolean = true,\n        find: boolean = true\n    ): void {\n        if (query != null) {\n            // Update query without triggering any updates.\n            this.deferUpdates(true);\n            this.query = query;\n            // Turning of deferredUpdates will now execute pending updates (if any).\n            this.deferUpdates(false);\n\n            // A query was included, so the above update is all we want to do.\n            return;\n        }\n\n        // Since a query was not passed, then we update based on each service's setting, using the bool params autocomplete,\n        // categorize and find to allow overriding and turning off the individual services.\n        if (autocomplete && this.autocomplete.shouldUpdate()) {\n            this.autocomplete.update(this.query);\n        }\n        if (categorize && this.categorize.shouldUpdate()) {\n            this.categorize.update(this.query);\n        }\n        if (find && this.find.shouldUpdate()) {\n            this.find.update(this.query);\n        }\n    }\n\n    /**\n     * This method is called when you want to force an update call to be made for the services.\n     *\n     * It may force an update based on the existing this.query value or you can provide a new query object to be used.\n     * After having set the value the services will be called, unless they are disabled in their respective configs\n     * or turned off in the params to this method.\n     *\n     * @param query If passed in then the query object will update the internal query-object without triggering any updates,\n     * but will just after this force an update on all enabled services, that are not turned off by the consecutive params.\n     * @param autocomplete Allows turning off updates for the Autocomplete service (if the service is enabled in the\n     * settings).\n     * @param categorize Allows turning off updates for the Categorize service (if the service is enabled in the settings).\n     * @param find Allows turning off updates for the Find service (if the service is enabled in the settings).\n     */\n    public forceUpdate(\n        query?: IQuery,\n        autocomplete: boolean = true,\n        categorize: boolean = true,\n        find: boolean = true\n    ): void {\n        if (query != null) {\n            // Update query without triggering any updates.\n            this.deferUpdates(true);\n            this.query = query;\n            // Skip executing any potential pending updates.\n            this.deferUpdates(false, true);\n        }\n\n        // Force an update (by passing null to query param) and forwarding service overrides.\n        this.update(null, autocomplete, categorize, find);\n    }\n\n    /**\n     * Resets the SearchClient instance (filters, queryText, categoryPresentations++) to initial values.\n     */\n    public reset(): void {\n        this.setup(this._origSettings, this._origFetchMethod);\n    }\n\n    /**\n     * Returns true if the passed argument is a filter.\n     * Typically used to visually indicate that a category is also a filter.\n     */\n    public isFilter(category: string[] | ICategory | Filter): boolean {\n        return this._query.isFilter(category);\n    }\n\n    /**\n     * Checks whether any child-node of the given category has a filter defined for it.\n     * Typically used to visually show in the tree that a child-node has an active filter.\n     */\n    public hasChildFilter(category: string[] | ICategory): boolean {\n        return this._query.hasChildFilter(category);\n    }\n\n    /**\n     * Add the given filter, if it isn't already there.\n     *\n     * Will run trigger-checks and potentially update services.\n     */\n    public filterAdd(filter: string[] | ICategory | Filter): boolean {\n        const item = this._query.filterId(filter);\n        const foundIndex = this._query.filterIndex(item);\n\n        if (foundIndex === -1) {\n            this.doFilterAdd(item);\n            return true;\n        }\n        // Filter already set\n        return false;\n    }\n\n    /**\n     * Remove the given filter, if it is already set.\n     *\n     * Will run trigger-checks and potentially update services.\n     */\n    public filterRemove(filter: string[] | ICategory | Filter): boolean {\n        const item = this._query.filterId(filter);\n        const foundIndex = this._query.filterIndex(item);\n\n        if (foundIndex > -1) {\n            this.doFilterRemove(foundIndex);\n            return true;\n        }\n        // Filter already set\n        return false;\n    }\n\n    /**\n     * Toggle the given filter.\n     *\n     * Will run trigger-checks and potentially update services.\n     *\n     * @param filter Is either string[], Filter or Category. When string array it expects the equivalent of the Category.categoryName property, which is like this: [\"Author\", \"Normann\"].\n     * @return true if the filter was added, false if it was removed.\n     */\n    public filterToggle(filter: string[] | ICategory | Filter): boolean {\n        const item = this._query.filterId(filter);\n        const foundIndex = this._query.filterIndex(item);\n\n        if (foundIndex > -1) {\n            this.doFilterRemove(foundIndex);\n            return false;\n        } else {\n            this.doFilterAdd(item);\n            return true;\n        }\n    }\n\n    /**\n     * Toggles the expansion/collapsed state for the given group/category\n     *\n     * @param node The node that is to be expanded.\n     * @return The new state of the node.\n     */\n    public toggleCategoryExpansion(\n        node: string[] | ICategory | IGroup,\n        state?: boolean\n    ): boolean {\n        // Look up internal expansion-override list and see if we are already overriding this setting.\n        if (Array.isArray(node)) {\n            node = this.findCategory(node);\n        }\n        const key = node.hasOwnProperty(\"categoryName\")\n            ? (node as ICategory).categoryName.join(\"|\")\n            : node.name;\n        if (!this.settings.categorize.presentations[key]) {\n            this.settings.categorize.presentations[\n                key\n            ] = new CategoryPresentation({ expanded: !node.expanded });\n        } else {\n            this.settings.categorize.presentations[key].expanded = !this\n                .settings.categorize.presentations[key].expanded;\n        }\n        this.categorize.clientCategoriesUpdate(this.query);\n        return this.settings.categorize.presentations[key].expanded;\n    }\n\n    /**\n     * Decides whether an update should be executed or not. Typically used to temporarily turn\n     * off update-execution. When turned back on the second param can be used to indicate whether\n     * pending updates should be executed or not.\n     *\n     * **Note:** Changes deferring of updates for all components (Autocomplete, Categorize and Find).\n     * Use the service properties of the SearchClient instance to control deferring for each service.\n     *\n     * @example Some examples:\n     *\n     *     // Example 1: Defer updates to avoid multiple updates:\n     *     searchClient.deferUpdates(true);\n     *\n     *     // Example 2: Change some props that triggers may be listening for\n     *     searchClient.dateFrom = { M: -1};\n     *     searchClient.dateTo = { M: 0};\n     *     // When calling deferUpdates with (false) the above two update-events are now executed as one instead (both value-changes are accounted for though)\n     *     searchClient.deferUpdates(false);\n     *\n     *     // Example 3: Suppress updates (via deferUpdates):\n     *     searchClient.deferUpdates(true);\n     *     // Change a prop that should trigger updates\n     *     searchClient.queryText = \"some text\";\n     *     // Call deferUpdates with (false, true), to skip the pending update.\n     *     searchClient.deferUpdates(false, true);\n     *\n     *     // Example 4: Defer update only for one service (Categorize in this sample):\n     *     searchClient.categorize.deferUpdates(true);\n     *\n     * @param state Turns on or off deferring of updates.\n     * @param skipPending Used to indicate if a pending update is to be executed or skipped when deferring\n     * is turned off. The param is ignored for `state=true`. Default is false.\n     */\n    public deferUpdates(state: boolean, skipPending: boolean = false) {\n        this.autocomplete.deferUpdates(state, skipPending);\n        this.categorize.deferUpdates(state, skipPending);\n        this.find.deferUpdates(state, skipPending);\n    }\n\n    /**\n     * Find the category based on the category-name array.\n     *\n     * @param categoryName The category array that identifies the category.\n     * @returns The Category object if found or null.\n     */\n    public findCategory(categoryName: string[]): IGroup | ICategory | null {\n        return this.categorize.findCategory(categoryName);\n    }\n\n    /**\n     * Gets the previous page of match-results.\n     * Will run trigger-checks and potentially update services.\n     */\n    public matchPagePrev(): boolean {\n        // Cannot fetch page less than 0\n        if (this._query.matchPage > 1) {\n            this.matchPage--;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Gets the next page of match-results (if any).\n     * Will run trigger-checks and potentially update services.\n     */\n    public matchPageNext(): boolean {\n        this.matchPage++;\n        return true;\n    }\n\n    /**\n     * Gets the currently active categorizationType value.\n     */\n    get categorizationType(): CategorizationType {\n        return this._query.categorizationType;\n    }\n\n    /**\n     * Sets the currently active categorizationType.\n     *\n     * Will run trigger-checks and potentially update services.\n     */\n    set categorizationType(categorizationType: CategorizationType) {\n        // tslint:disable-next-line:triple-equals\n        if (categorizationType != this._query.categorizationType) {\n            const oldValue = this._query.categorizationType;\n            this._query.clientId = categorizationType;\n\n            this.autocomplete.categorizationTypeChanged(oldValue, this._query);\n            this.categorize.categorizationTypeChanged(oldValue, this._query);\n            this.find.categorizationTypeChanged(oldValue, this._query);\n        }\n    }\n\n    /**\n     * Gets the currently active client-id value.\n     */\n    get clientId(): string {\n        return this._query.clientId;\n    }\n\n    /**\n     * Sets the currently active client-id.\n     *\n     * Will run trigger-checks and potentially update services.\n     */\n    set clientId(clientId: string) {\n        // tslint:disable-next-line:triple-equals\n        if (clientId != this._query.clientId) {\n            const oldValue = this._query.clientId;\n            this._query.clientId = clientId;\n\n            this.autocomplete.clientIdChanged(oldValue, this._query);\n            this.categorize.clientIdChanged(oldValue, this._query);\n            this.find.clientIdChanged(oldValue, this._query);\n        }\n    }\n\n    /**\n     * Gets the currently active date-from value.\n     */\n    get dateFrom(): DateSpecification {\n        return this._query.dateFrom;\n    }\n\n    /**\n     * Sets the from-date for matches to be used.\n     *\n     * Will run trigger-checks and potentially update services.\n     */\n    set dateFrom(dateFrom: DateSpecification) {\n        if (!deepEqual(dateFrom, this._query.dateFrom)) {\n            const oldValue = Object.assign({}, this._query.dateFrom); // clone\n            this._query.dateFrom = dateFrom;\n\n            this.autocomplete.dateFromChanged(oldValue, this._query);\n            this.categorize.dateFromChanged(oldValue, this._query);\n            this.find.dateFromChanged(oldValue, this._query);\n        }\n    }\n\n    /**\n     * Gets the currently active date-to value.\n     */\n    get dateTo(): DateSpecification {\n        return this._query.dateTo;\n    }\n\n    /**\n     * Sets the to-date for matches to be used.\n     *\n     * Will run trigger-checks and potentially update services.\n     */\n    set dateTo(dateTo: DateSpecification) {\n        if (!deepEqual(dateTo, this._query.dateTo)) {\n            const oldValue = Object.assign({}, this._query.dateTo); // clone\n            this._query.dateTo = dateTo;\n\n            this.autocomplete.dateToChanged(oldValue, this._query);\n            this.categorize.dateToChanged(oldValue, this._query);\n            this.find.dateToChanged(oldValue, this._query);\n        }\n    }\n\n    /**\n     * Gets the currently active filters.\n     */\n    get filters(): Filter[] {\n        return this._query.filters;\n    }\n\n    /**\n     * Sets the filters to be used.\n     *\n     * Will run trigger-checks and potentially update services.\n     */\n    set filters(filters: Filter[]) {\n        filters = filters || [];\n        const sortedFilters = filters.sort();\n        // tslint:disable-next-line:triple-equals\n        if (sortedFilters.join(\"\") != this._query.filters.join(\"\")) {\n            const oldValue = this._query.filters.slice(0); // clone\n            this._query.filters = sortedFilters;\n\n            this.autocomplete.filtersChanged(oldValue, this._query);\n            this.categorize.filtersChanged(oldValue, this._query);\n            this.find.filtersChanged(oldValue, this._query);\n        }\n    }\n\n    /**\n     * Gets the currently active match generateContent setting.\n     */\n    get matchGenerateContent(): boolean {\n        return this._query.matchGenerateContent;\n    }\n\n    /**\n     * Sets whether the results should generate the content or not.\n     *\n     * **Note:** Requires the backend IndexManager to have the option enabled in its configuration too.\n     *\n     * Will run trigger-checks and potentially update services.\n     */\n    set matchGenerateContent(generateContent: boolean) {\n        // tslint:disable-next-line:triple-equals\n        if (generateContent != this._query.matchGenerateContent) {\n            const oldValue = this._query.matchGenerateContent;\n            this._query.matchGenerateContent = generateContent;\n\n            this.autocomplete.matchGenerateContentChanged(\n                oldValue,\n                this._query\n            );\n            this.categorize.matchGenerateContentChanged(oldValue, this._query);\n            this.find.matchGenerateContentChanged(oldValue, this._query);\n        }\n    }\n\n    /**\n     * Gets the currently active match generateContentHighlights setting.\n     */\n    get matchGenerateContentHighlights(): boolean {\n        return this._query.matchGenerateContent;\n    }\n\n    /**\n     * Sets whether the results should generate the content-highlight tags or not.\n     *\n     * **Note:** See the matchGenerateContent property in regards to IndexManager requirements.\n     *\n     * Will run trigger-checks and potentially update services.\n     */\n    set matchGenerateContentHighlights(generateContentHighlights: boolean) {\n        if (\n            // tslint:disable-next-line:triple-equals\n            generateContentHighlights !=\n            this._query.matchGenerateContentHighlights\n        ) {\n            const oldValue = this._query.matchGenerateContentHighlights;\n            this._query.matchGenerateContentHighlights = generateContentHighlights;\n\n            this.autocomplete.matchGenerateContentHighlightsChanged(\n                oldValue,\n                this._query\n            );\n            this.categorize.matchGenerateContentHighlightsChanged(\n                oldValue,\n                this._query\n            );\n            this.find.matchGenerateContentHighlightsChanged(\n                oldValue,\n                this._query\n            );\n        }\n    }\n\n    /**\n     * Gets the currently active match grouping mode.\n     */\n    get matchGrouping(): boolean {\n        return this._query.matchGrouping;\n    }\n\n    /**\n     * Sets whether the results should be grouped or not.\n     *\n     * **Note:** Requires the search-service to have the option enabled in it's configuration too.\n     *\n     * Will run trigger-checks and potentially update services.\n     */\n    set matchGrouping(useGrouping: boolean) {\n        // tslint:disable-next-line:triple-equals\n        if (useGrouping != this._query.matchGrouping) {\n            const oldValue = this._query.matchGrouping;\n            this._query.matchGrouping = useGrouping;\n\n            this.autocomplete.matchGroupingChanged(oldValue, this._query);\n            this.categorize.matchGroupingChanged(oldValue, this._query);\n            this.find.matchGroupingChanged(oldValue, this._query);\n        }\n    }\n\n    /**\n     * Gets the currently active match-page.\n     */\n    get matchPage(): number {\n        return this._query.matchPage;\n    }\n\n    /**\n     * Sets the match-page to get.\n     * Will run trigger-checks and potentially update services.\n     */\n    set matchPage(page: number) {\n        if (page < 1) {\n            throw new Error(\n                '\"matchPage\" cannot be set to a value smaller than 1.'\n            );\n        }\n        // tslint:disable-next-line:triple-equals\n        if (page != this._query.matchPage) {\n            const oldValue = this._query.matchPage;\n            this._query.matchPage = page;\n\n            this.autocomplete.matchPageChanged(oldValue, this._query);\n            this.categorize.matchPageChanged(oldValue, this._query);\n            this.find.matchPageChanged(oldValue, this._query);\n        }\n    }\n\n    /**\n     * Gets the currently active match page-size.\n     */\n    get matchPageSize(): number {\n        return this._query.matchPageSize;\n    }\n\n    /**\n     * Sets the match page-size to be used.\n     * Will run trigger-checks and potentially update services.\n     */\n    set matchPageSize(pageSize: number) {\n        if (pageSize < 1) {\n            throw new Error(\n                '\"matchPageSize\" cannot be set to a value smaller than 1.'\n            );\n        }\n        // tslint:disable-next-line:triple-equals\n        if (pageSize != this._query.matchPageSize) {\n            const oldValue = this._query.matchPageSize;\n            this._query.matchPageSize = pageSize;\n\n            this.autocomplete.matchPageSizeChanged(oldValue, this._query);\n            this.categorize.matchPageSizeChanged(oldValue, this._query);\n            this.find.matchPageSizeChanged(oldValue, this._query);\n        }\n    }\n\n    /**\n     * Gets the currently active match order.\n     */\n    get matchOrderBy(): OrderBy {\n        return this._query.matchOrderBy;\n    }\n\n    /**\n     * Sets the match sorting mode to be used.\n     * Will run trigger-checks and potentially update services.\n     */\n    set matchOrderBy(orderBy: OrderBy) {\n        // tslint:disable-next-line:triple-equals\n        if (orderBy != this._query.matchOrderBy) {\n            const oldValue = this._query.matchOrderBy;\n            this._query.matchOrderBy = orderBy;\n\n            this.autocomplete.matchOrderByChanged(oldValue, this._query);\n            this.categorize.matchOrderByChanged(oldValue, this._query);\n            this.find.matchOrderByChanged(oldValue, this._query);\n        }\n    }\n\n    /**\n     * Gets the currently active max number of autocomplete suggestions to get.\n     */\n    get maxSuggestions(): number {\n        return this._query.maxSuggestions;\n    }\n\n    /**\n     * Sets the max number of autocomplete suggestions to get.\n     * Will run trigger-checks and potentially update services.\n     */\n    set maxSuggestions(maxSuggestions: number) {\n        if (maxSuggestions < 0) {\n            maxSuggestions = 0;\n        }\n        // tslint:disable-next-line:triple-equals\n        if (maxSuggestions != this._query.maxSuggestions) {\n            const oldValue = this._query.maxSuggestions;\n            this._query.maxSuggestions = maxSuggestions;\n\n            this.autocomplete.maxSuggestionsChanged(oldValue, this._query);\n            this.categorize.maxSuggestionsChanged(oldValue, this._query);\n            this.find.maxSuggestionsChanged(oldValue, this._query);\n        }\n    }\n\n    /**\n     * Returns the currently active query.\n     */\n    get query(): IQuery {\n        return this._query;\n    }\n\n    /**\n     * Sets the query to use. Consider using the queryText-property for query-text-changes instead.\n     *\n     * **Note:** Changing the `query` property will likely lead to multiple trigger-checks and potential updates.\n     * This is because changing the whole value will lead to each of the query-objects' properties to trigger individual\n     * events.\n     *\n     * To avoid multiple updates, call `deferUpdates(true)` before and deferUpdates(false) afterwards. Then at max\n     * only one update will be generated.\n     */\n    set query(query: IQuery) {\n        this.clientId = query.clientId;\n        this.dateFrom = query.dateFrom;\n        this.dateTo = query.dateTo;\n        this.filters = query.filters;\n        this.matchGrouping = query.matchGrouping;\n        this.matchOrderBy = query.matchOrderBy;\n        this.matchPage = query.matchPage;\n        this.matchPageSize = query.matchPageSize;\n        this.maxSuggestions = query.maxSuggestions;\n        this.queryText = query.queryText;\n        this.searchType = query.searchType;\n    }\n\n    /**\n     * Gets the currently active query-object.\n     */\n    get queryText(): string {\n        return this._query.queryText;\n    }\n\n    /**\n     * Sets the query-text to be used.\n     * Will run trigger-checks and potentially update services.\n     */\n    set queryText(queryText: string) {\n        // tslint:disable-next-line:triple-equals\n        if (queryText != this._query.queryText) {\n            const oldValue = this._query.queryText;\n            this._query.queryText = queryText;\n\n            this.autocomplete.queryTextChanged(oldValue, this._query);\n            this.categorize.queryTextChanged(oldValue, this._query);\n            this.find.queryTextChanged(oldValue, this._query);\n        }\n    }\n\n    /**\n     * Gets the currently active search-type value.\n     */\n    get searchType(): SearchType {\n        return this._query.searchType;\n    }\n\n    /**\n     * Sets the search-type to be used.\n     * Will run trigger-checks and potentially update services.\n     */\n    set searchType(searchType: SearchType) {\n        // tslint:disable-next-line:triple-equals\n        if (searchType != this._query.searchType) {\n            const oldValue = this._query.searchType;\n            this._query.searchType = searchType;\n\n            this.autocomplete.searchTypeChanged(oldValue, this._query);\n            this.categorize.searchTypeChanged(oldValue, this._query);\n            this.find.searchTypeChanged(oldValue, this._query);\n        }\n    }\n\n    /**\n     * Gets the currently active match generateContent setting.\n     */\n    get uiLanguageCode(): string {\n        return this._query.uiLanguageCode;\n    }\n\n    /**\n     * Sets the language that the client uses. Affects category-names (and in the future maybe metadata too).\n     * The expected values should be according to the https://www.wikiwand.com/en/IETF_language_tag standard.\n     *\n     * Changes will run trigger-checks and potentially update services.\n     */\n    set uiLanguageCode(uiLanguageCode: string) {\n        // tslint:disable-next-line:triple-equals\n        if (uiLanguageCode != this._query.uiLanguageCode) {\n            const oldValue = this._query.uiLanguageCode;\n            this._query.uiLanguageCode = uiLanguageCode;\n\n            this.autocomplete.uiLanguageCodeChanged(oldValue, this._query);\n            this.categorize.uiLanguageCodeChanged(oldValue, this._query);\n            this.find.uiLanguageCodeChanged(oldValue, this._query);\n        }\n    }\n\n    private doFilterAdd(filter: string[]) {\n        // Find item in categorize.categories, and build displayName for the Filter (displayName for each categoryNode in the hierarchy)\n        const newFilter = this.categorize.createCategoryFilter(filter);\n        if (!newFilter) {\n            return;\n        }\n        const oldValue = this._query.filters.slice(0);\n\n        let toRemove: Filter[] = [];\n\n        // Find parent filters on the same path (to be removed)\n        let filterName = newFilter.category.categoryName[0];\n        for (let i = 1; i < newFilter.category.categoryName.length - 1; i++) {\n            filterName += `|${newFilter.category.categoryName[i]}`;\n            this._query.filters.forEach(f => {\n                let fName = f.category.categoryName.join(\"|\");\n                if (fName === filterName) {\n                    toRemove.push(f);\n                }\n            });\n        }\n\n        filterName += `|${\n            newFilter.category.categoryName[\n                newFilter.category.categoryName.length - 1\n            ]\n        }`;\n\n        // Find child filters of the same path (to be removed)\n        this._query.filters.forEach(f => {\n            let fName = f.category.categoryName.join(\"|\");\n            if (fName.startsWith(filterName)) {\n                toRemove.push(f);\n            }\n        });\n\n        // Execute the actual remove (without triggering an update).\n        toRemove.forEach(f => {\n            this._query.filters.forEach((item, index) => {\n                if (item === f) {\n                    this._query.filters.splice(index, 1);\n                }\n            });\n        });\n\n        // Add the new filter\n        this._query.filters.push(newFilter);\n        this._query.filters.sort();\n\n        this.autocomplete.filtersChanged(oldValue, this._query);\n        this.categorize.filtersChanged(oldValue, this._query);\n        this.find.filtersChanged(oldValue, this._query);\n    }\n\n    private doFilterRemove(i: number) {\n        const oldValue = this._query.filters.slice(0);\n        this._query.filters.splice(i, 1);\n\n        // Note: No need to sort the filter-list afterwards, as removing an item cannot change the order anyway.\n\n        this.autocomplete.filtersChanged(oldValue, this._query);\n        this.categorize.filtersChanged(oldValue, this._query);\n        this.find.filtersChanged(oldValue, this._query);\n\n        return true;\n    }\n\n    private setup(settings: string | ISettings, fetchMethod: Fetch) {\n        // Make sure that we keep the original settings and fetchmethod, for the reset-function to reuse later.\n        this._origSettings = clone(settings);\n        this._origFetchMethod = clone(fetchMethod);\n\n        this.settings = new Settings(settings);\n\n        this.authentication = (new AuthenticationFactory()).create(this.settings.authentication, this, fetchMethod);\n\n        this.settings.authentication = this.authentication.settings;\n        this.autocomplete = new Autocomplete(\n            this.settings.autocomplete,\n            this,\n            fetchMethod\n        );\n        this.settings.autocomplete = this.autocomplete.settings;\n        this.categorize = new Categorize(\n            this.settings.categorize,\n            this,\n            fetchMethod\n        );\n        this.settings.categorize = this.categorize.settings;\n        this.find = new Find(this.settings.find, this, fetchMethod);\n        this.settings.find = this.find.settings;\n        this._query = new Query(this.settings.query);\n    }\n}\n"]}