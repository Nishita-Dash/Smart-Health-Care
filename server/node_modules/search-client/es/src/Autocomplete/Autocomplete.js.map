{"version":3,"file":"Autocomplete.js","sourceRoot":"","sources":["../../../src/Autocomplete/Autocomplete.ts"],"names":[],"mappings":"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","sourcesContent":["import { AuthToken } from \"../Authentication\";\r\nimport { BaseCall, Fetch, IQuery, Query } from \"../Common\";\r\nimport { AutocompleteQueryConverter } from \"./AutocompleteQueryConverter\";\r\nimport {\r\n    AutocompleteSettings,\r\n    IAutocompleteSettings\r\n} from \"./AutocompleteSettings\";\r\n\r\n/**\r\n * This class allows you to create a service that executes autocomplete lookups for the Haive SearchManager service.\r\n *\r\n * Note: Typically you will not instantiate this class. Instead you will use it indirectly via the SearchClient class.\r\n */\r\nexport class Autocomplete extends BaseCall<string[]> {\r\n    public settings: IAutocompleteSettings;\r\n\r\n    private queryConverter: AutocompleteQueryConverter;\r\n\r\n    /**\r\n     * Creates an Autocomplete instance that knows how to get query-suggestions.\r\n     * @param settings - The settings for how the Autocomplete is to operate.\r\n     * @param auth - The object that handles authentication.\r\n     */\r\n    constructor(\r\n        settings: IAutocompleteSettings | string,\r\n        auth?: AuthToken,\r\n        fetchMethod?: Fetch\r\n    ) {\r\n        super(); // dummy\r\n        // prepare for super.init\r\n        settings = new AutocompleteSettings(settings);\r\n        auth = auth || new AuthToken();\r\n        super.init(settings, auth, fetchMethod);\r\n        this.queryConverter = new AutocompleteQueryConverter();\r\n    }\r\n\r\n    /**\r\n     * When called it will execute a rest-call to the base-url and fetch autocomplete suggestions based on the query passed.\r\n     * Note that if a request callback has been setup then if it returns false the request is skipped.\r\n     * @param query - Is used to find out which autocomplete suggestions and from what sources they should be retrieved.\r\n     * @param suppressCallbacks - Set to true if you have defined callbacks, but somehow don't want them to be called.\r\n     * @returns a Promise that when resolved returns a string array of suggestions (or undefined if a callback stops the request).\r\n     */\r\n    public fetch(\r\n        query: IQuery = new Query(),\r\n        suppressCallbacks: boolean = false\r\n    ): Promise<string[]> {\r\n        let url = this.queryConverter.getUrl(\r\n            this.settings.url,\r\n            new Query(query)\r\n        );\r\n        let reqInit = this.requestObject();\r\n\r\n        if (this.cbRequest(suppressCallbacks, url, reqInit)) {\r\n            return this.fetchMethod(url, reqInit)\r\n                .then((response: Response) => {\r\n                    if (!response.ok) {\r\n                        throw Error(\r\n                            `${response.status} ${response.statusText} for request url '${url}'`\r\n                        );\r\n                    }\r\n                    return response.json();\r\n                })\r\n                .then((suggestions: string[]) => {\r\n                    this.cbSuccess(\r\n                        suppressCallbacks,\r\n                        suggestions,\r\n                        url,\r\n                        reqInit\r\n                    );\r\n                    return suggestions;\r\n                })\r\n                .catch(error => {\r\n                    this.cbError(suppressCallbacks, error, url, reqInit);\r\n                    throw error;\r\n                });\r\n        } else {\r\n            // TODO: When a fetch is stopped due to cbRequest returning false, should we:\r\n            // 1) Reject the promise (will then be returned as an error).\r\n            // or\r\n            // 2) Resolve the promise (will then be returned as a success).\r\n            // or\r\n            // 3) should we do something else (old code returned undefined...)\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    public maxSuggestionsChanged(oldValue: number, query: IQuery) {\r\n        if (!this.shouldUpdate(\"maxSuggestions\", query)) {\r\n            return;\r\n        }\r\n        if (this.settings.triggers.maxSuggestionsChanged) {\r\n            this.update(query);\r\n        }\r\n    }\r\n\r\n    public queryTextChanged(oldValue: string, query: IQuery) {\r\n        if (!this.shouldUpdate(\"queryText\", query)) {\r\n            return;\r\n        }\r\n        if (this.settings.triggers.queryChange) {\r\n            if (\r\n                query.queryText.length >\r\n                this.settings.triggers.queryChangeMinLength\r\n            ) {\r\n                if (\r\n                    this.settings.triggers.queryChangeInstantRegex &&\r\n                    this.settings.triggers.queryChangeInstantRegex.test(\r\n                        query.queryText\r\n                    )\r\n                ) {\r\n                    this.update(query);\r\n                    return;\r\n                } else {\r\n                    if (this.settings.triggers.queryChangeDelay > -1) {\r\n                        this.update(\r\n                            query,\r\n                            this.settings.triggers.queryChangeDelay\r\n                        );\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        clearTimeout(this.delay);\r\n    }\r\n}\r\n"]}