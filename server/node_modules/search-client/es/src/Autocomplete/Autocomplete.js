import { __extends } from "tslib";
import { AuthToken } from "../Authentication";
import { BaseCall, Query } from "../Common";
import { AutocompleteQueryConverter } from "./AutocompleteQueryConverter";
import { AutocompleteSettings } from "./AutocompleteSettings";
/**
 * This class allows you to create a service that executes autocomplete lookups for the Haive SearchManager service.
 *
 * Note: Typically you will not instantiate this class. Instead you will use it indirectly via the SearchClient class.
 */
var Autocomplete = /** @class */ (function (_super) {
    __extends(Autocomplete, _super);
    /**
     * Creates an Autocomplete instance that knows how to get query-suggestions.
     * @param settings - The settings for how the Autocomplete is to operate.
     * @param auth - The object that handles authentication.
     */
    function Autocomplete(settings, auth, fetchMethod) {
        var _this = _super.call(this) || this;
        // prepare for super.init
        settings = new AutocompleteSettings(settings);
        auth = auth || new AuthToken();
        _super.prototype.init.call(_this, settings, auth, fetchMethod);
        _this.queryConverter = new AutocompleteQueryConverter();
        return _this;
    }
    /**
     * When called it will execute a rest-call to the base-url and fetch autocomplete suggestions based on the query passed.
     * Note that if a request callback has been setup then if it returns false the request is skipped.
     * @param query - Is used to find out which autocomplete suggestions and from what sources they should be retrieved.
     * @param suppressCallbacks - Set to true if you have defined callbacks, but somehow don't want them to be called.
     * @returns a Promise that when resolved returns a string array of suggestions (or undefined if a callback stops the request).
     */
    Autocomplete.prototype.fetch = function (query, suppressCallbacks) {
        var _this = this;
        if (query === void 0) { query = new Query(); }
        if (suppressCallbacks === void 0) { suppressCallbacks = false; }
        var url = this.queryConverter.getUrl(this.settings.url, new Query(query));
        var reqInit = this.requestObject();
        if (this.cbRequest(suppressCallbacks, url, reqInit)) {
            return this.fetchMethod(url, reqInit)
                .then(function (response) {
                if (!response.ok) {
                    throw Error(response.status + " " + response.statusText + " for request url '" + url + "'");
                }
                return response.json();
            })
                .then(function (suggestions) {
                _this.cbSuccess(suppressCallbacks, suggestions, url, reqInit);
                return suggestions;
            })
                .catch(function (error) {
                _this.cbError(suppressCallbacks, error, url, reqInit);
                throw error;
            });
        }
        else {
            // TODO: When a fetch is stopped due to cbRequest returning false, should we:
            // 1) Reject the promise (will then be returned as an error).
            // or
            // 2) Resolve the promise (will then be returned as a success).
            // or
            // 3) should we do something else (old code returned undefined...)
            return Promise.resolve(null);
        }
    };
    Autocomplete.prototype.maxSuggestionsChanged = function (oldValue, query) {
        if (!this.shouldUpdate("maxSuggestions", query)) {
            return;
        }
        if (this.settings.triggers.maxSuggestionsChanged) {
            this.update(query);
        }
    };
    Autocomplete.prototype.queryTextChanged = function (oldValue, query) {
        if (!this.shouldUpdate("queryText", query)) {
            return;
        }
        if (this.settings.triggers.queryChange) {
            if (query.queryText.length >
                this.settings.triggers.queryChangeMinLength) {
                if (this.settings.triggers.queryChangeInstantRegex &&
                    this.settings.triggers.queryChangeInstantRegex.test(query.queryText)) {
                    this.update(query);
                    return;
                }
                else {
                    if (this.settings.triggers.queryChangeDelay > -1) {
                        this.update(query, this.settings.triggers.queryChangeDelay);
                        return;
                    }
                }
            }
        }
        clearTimeout(this.delay);
    };
    return Autocomplete;
}(BaseCall));
export { Autocomplete };
//# sourceMappingURL=Autocomplete.js.map