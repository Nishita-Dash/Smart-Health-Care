import { __extends } from "tslib";
import { BaseQueryConverter } from "../Common";
/**
 * Class to handle creating autocomplete lookups.
 */
var AutocompleteQueryConverter = /** @class */ (function (_super) {
    __extends(AutocompleteQueryConverter, _super);
    function AutocompleteQueryConverter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Converts the query params to an array of key=value segments.
     */
    AutocompleteQueryConverter.prototype.getUrlParams = function (query) {
        var params = [];
        // TODO: Add clientId also for autocomplete?
        this.addParamIfSet(params, "l", 1); // Forces this to always do server-side when called. The client will skip calling when not needed instead.
        this.addParamIfSet(params, "q", query.queryText);
        this.addParamIfSet(params, "s", query.maxSuggestions);
        return params;
    };
    return AutocompleteQueryConverter;
}(BaseQueryConverter));
export { AutocompleteQueryConverter };
//# sourceMappingURL=AutocompleteQueryConverter.js.map