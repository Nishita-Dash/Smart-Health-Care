import { __extends } from "tslib";
import { AuthToken } from "../Authentication";
import { BaseCall, Query, } from "../Common";
import { FindQueryConverter } from "./FindQueryConverter";
import { FindSettings } from "./FindSettings";
/**
 * The Find service queries the search-engine for search-matches for the given query.
 *
 * It is normally used indirectly via the SearchClient class.
 */
var Find = /** @class */ (function (_super) {
    __extends(Find, _super);
    /**
     * Creates a Find instance that handles fetching matches dependent on settings and query.
     * @param settings - The settings that define how the Find instance is to operate.
     * @param auth - An auth-object that handles the authentication.
     */
    function Find(settings, auth, fetchMethod) {
        var _this = _super.call(this) || this;
        // prepare for super.init
        settings = new FindSettings(settings);
        auth = auth || new AuthToken();
        _super.prototype.init.call(_this, settings, auth, fetchMethod);
        // Set own this props
        _this.queryConverter = new FindQueryConverter();
        return _this;
    }
    /**
     * Fetches the search-result matches from the server.
     * Note that if a request callback has been setup then if it returns false the request is skipped.
     * @param query - The query-object that controls which results that are to be returned.
     * @param suppressCallbacks - Set to true if you have defined callbacks, but somehow don't want them to be called.
     * @returns a Promise that when resolved returns a string array of suggestions (or undefined if a callback stops the request).
     */
    Find.prototype.fetch = function (query, suppressCallbacks) {
        var _this = this;
        if (query === void 0) { query = new Query(); }
        if (suppressCallbacks === void 0) { suppressCallbacks = false; }
        var url = this.queryConverter.getUrl(this.settings.url, new Query(query));
        var reqInit = this.requestObject();
        if (this.cbRequest(suppressCallbacks, url, reqInit)) {
            this.fetchQuery = new Query(query);
            return this.fetchMethod(url, reqInit)
                .then(function (response) {
                if (!response.ok) {
                    throw Error(response.status + " " + response.statusText + " for request url '" + url + "'");
                }
                return response.json();
            })
                .then(function (matches) {
                // Handle situations where parsing was ok, but we have an error in the returned message from the server
                if (matches.errorMessage || matches.statusCode !== 0) {
                    var errorMessage = matches.errorMessage, statusCode = matches.statusCode;
                    var warning = {
                        message: errorMessage || "Unspecified issue",
                        statusCode: statusCode
                    };
                    _this.cbWarning(suppressCallbacks, warning, url, reqInit);
                }
                _this.cbSuccess(suppressCallbacks, matches, url, reqInit);
                return matches;
            })
                .catch(function (error) {
                _this.cbError(suppressCallbacks, error, url, reqInit);
                throw error;
            });
        }
        else {
            // TODO: When a fetch is stopped due to cbRequest returning false, should we:
            // 1) Reject the promise (will then be returned as an error).
            // or
            // 2) Resolve the promise (will then be returned as a success).
            // or
            // 3) should we do something else (old code returned undefined...)
            return Promise.resolve(null);
        }
    };
    Find.prototype.clientIdChanged = function (oldValue, query) {
        if (!this.shouldUpdate("clientId", query)) {
            return;
        }
        if (this.settings.triggers.clientIdChanged) {
            this.update(query);
        }
    };
    Find.prototype.dateFromChanged = function (oldValue, query) {
        if (!this.shouldUpdate("dateFrom", query)) {
            return;
        }
        if (this.settings.triggers.dateFromChanged) {
            this.update(query);
        }
    };
    Find.prototype.dateToChanged = function (oldValue, query) {
        if (!this.shouldUpdate("dateTo", query)) {
            return;
        }
        if (this.settings.triggers.dateToChanged) {
            this.update(query);
        }
    };
    Find.prototype.filtersChanged = function (oldValue, query) {
        if (!this.shouldUpdate("filters", query)) {
            return;
        }
        if (this.settings.triggers.filtersChanged) {
            this.update(query);
        }
    };
    Find.prototype.matchGenerateContentChanged = function (oldValue, query) {
        if (!this.shouldUpdate("matchGenerateContent", query)) {
            return;
        }
        if (this.settings.triggers.matchGenerateContentChanged) {
            this.update(query);
        }
    };
    Find.prototype.matchGenerateContentHighlightsChanged = function (oldValue, query) {
        if (!this.shouldUpdate("matchGenerateContentHighlights", query)) {
            return;
        }
        if (this.settings.triggers.matchGenerateContentChanged &&
            this.settings.triggers.matchGenerateContentHighlightsChanged) {
            this.update(query);
        }
    };
    Find.prototype.matchGroupingChanged = function (oldValue, query) {
        if (!this.shouldUpdate("matchGrouping", query)) {
            return;
        }
        if (this.settings.triggers.matchGroupingChanged) {
            this.update(query);
        }
    };
    Find.prototype.matchOrderByChanged = function (oldValue, query) {
        if (!this.shouldUpdate("matchOrderBy", query)) {
            return;
        }
        if (this.settings.triggers.matchOrderByChanged) {
            this.update(query);
        }
    };
    Find.prototype.matchPageChanged = function (oldValue, query) {
        if (!this.shouldUpdate("matchPage", query)) {
            return;
        }
        if (this.settings.triggers.matchPageChanged) {
            this.update(query, null, true);
        }
    };
    Find.prototype.matchPageSizeChanged = function (oldValue, query) {
        if (!this.shouldUpdate("matchPageSize", query)) {
            return;
        }
        if (this.settings.triggers.matchPageSizeChanged) {
            this.update(query);
        }
    };
    Find.prototype.queryTextChanged = function (oldValue, query) {
        if (!this.shouldUpdate("queryText", query)) {
            return;
        }
        if (this.settings.triggers.queryChange) {
            if (query.queryText.trim().length >
                this.settings.triggers.queryChangeMinLength) {
                if (this.settings.triggers.queryChangeInstantRegex &&
                    this.settings.triggers.queryChangeInstantRegex.test(query.queryText)) {
                    this.update(query);
                    return;
                }
                else {
                    if (this.settings.triggers.queryChangeDelay > -1) {
                        this.update(query, this.settings.triggers.queryChangeDelay);
                        return;
                    }
                }
            }
        }
        clearTimeout(this.delay);
    };
    Find.prototype.searchTypeChanged = function (oldValue, query) {
        if (!this.shouldUpdate("searchType", query)) {
            return;
        }
        if (this.settings.triggers.searchTypeChanged) {
            this.update(query);
        }
    };
    Find.prototype.uiLanguageCodeChanged = function (oldValue, query) {
        if (!this.shouldUpdate("uiLanguageCode", query)) {
            return;
        }
        if (this.settings.triggers.uiLanguageCodeChanged) {
            this.update(query);
        }
    };
    return Find;
}(BaseCall));
export { Find };
//# sourceMappingURL=Find.js.map