{"version":3,"file":"Find.js","sourceRoot":"","sources":["../../../src/Find/Find.ts"],"names":[],"mappings":"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","sourcesContent":["import { AuthToken } from \"../Authentication\";\nimport {\n    Fetch,\n    BaseCall,\n    DateSpecification,\n    Filter,\n    IQuery,\n    Query,\n    OrderBy,\n    SearchType,\n} from \"../Common\";\nimport { FindQueryConverter } from \"./FindQueryConverter\";\nimport { FindSettings, IFindSettings } from \"./FindSettings\";\nimport { IMatches } from \"../Data\";\n\n/**\n * The Find service queries the search-engine for search-matches for the given query.\n *\n * It is normally used indirectly via the SearchClient class.\n */\nexport class Find extends BaseCall<IMatches> {\n    public settings: IFindSettings;\n\n    private queryConverter: FindQueryConverter;\n\n    /**\n     * Creates a Find instance that handles fetching matches dependent on settings and query.\n     * @param settings - The settings that define how the Find instance is to operate.\n     * @param auth - An auth-object that handles the authentication.\n     */\n    constructor(\n        settings: IFindSettings | string,\n        auth?: AuthToken,\n        fetchMethod?: Fetch\n    ) {\n        super(); // dummy\n        // prepare for super.init\n        settings = new FindSettings(settings);\n        auth = auth || new AuthToken();\n        super.init(settings, auth, fetchMethod);\n        // Set own this props\n        this.queryConverter = new FindQueryConverter();\n    }\n\n    /**\n     * Fetches the search-result matches from the server.\n     * Note that if a request callback has been setup then if it returns false the request is skipped.\n     * @param query - The query-object that controls which results that are to be returned.\n     * @param suppressCallbacks - Set to true if you have defined callbacks, but somehow don't want them to be called.\n     * @returns a Promise that when resolved returns a string array of suggestions (or undefined if a callback stops the request).\n     */\n    public fetch(\n        query: IQuery = new Query(),\n        suppressCallbacks: boolean = false\n    ): Promise<IMatches> {\n        let url = this.queryConverter.getUrl(\n            this.settings.url,\n            new Query(query)\n        );\n        let reqInit = this.requestObject();\n\n        if (this.cbRequest(suppressCallbacks, url, reqInit)) {\n            this.fetchQuery = new Query(query);\n            return this.fetchMethod(url, reqInit)\n                .then((response: Response) => {\n                    if (!response.ok) {\n                        throw Error(\n                            `${response.status} ${\n                                response.statusText\n                            } for request url '${url}'`\n                        );\n                    }\n                    return response.json();\n                })\n                .then((matches: IMatches) => {\n                    // Handle situations where parsing was ok, but we have an error in the returned message from the server\n                    if (matches.errorMessage || matches.statusCode !== 0) {\n                        let  { errorMessage, statusCode } = matches;\n                        const warning = {\n                            message: errorMessage || \"Unspecified issue\",\n                            statusCode\n                        };\n                        this.cbWarning(suppressCallbacks, warning, url, reqInit);\n                    }\n                    this.cbSuccess(suppressCallbacks, matches, url, reqInit);\n                    return matches;\n                })\n                .catch((error: any) => {\n                    this.cbError(suppressCallbacks, error, url, reqInit);\n                    throw error;\n                });\n        } else {\n            // TODO: When a fetch is stopped due to cbRequest returning false, should we:\n            // 1) Reject the promise (will then be returned as an error).\n            // or\n            // 2) Resolve the promise (will then be returned as a success).\n            // or\n            // 3) should we do something else (old code returned undefined...)\n            return Promise.resolve(null);\n        }\n    }\n\n    public clientIdChanged(oldValue: string, query: IQuery) {\n        if (!this.shouldUpdate(\"clientId\", query)) {\n            return;\n        }\n        if (this.settings.triggers.clientIdChanged) {\n            this.update(query);\n        }\n    }\n\n    public dateFromChanged(oldValue: DateSpecification, query: IQuery) {\n        if (!this.shouldUpdate(\"dateFrom\", query)) {\n            return;\n        }\n        if (this.settings.triggers.dateFromChanged) {\n            this.update(query);\n        }\n    }\n\n    public dateToChanged(oldValue: DateSpecification, query: IQuery) {\n        if (!this.shouldUpdate(\"dateTo\", query)) {\n            return;\n        }\n        if (this.settings.triggers.dateToChanged) {\n            this.update(query);\n        }\n    }\n\n    public filtersChanged(oldValue: Filter[], query: IQuery) {\n        if (!this.shouldUpdate(\"filters\", query)) {\n            return;\n        }\n        if (this.settings.triggers.filtersChanged) {\n            this.update(query);\n        }\n    }\n\n    public matchGenerateContentChanged(oldValue: boolean, query: IQuery) {\n        if (!this.shouldUpdate(\"matchGenerateContent\", query)) {\n            return;\n        }\n        if (this.settings.triggers.matchGenerateContentChanged) {\n            this.update(query);\n        }\n    }\n\n    public matchGenerateContentHighlightsChanged(\n        oldValue: boolean,\n        query: IQuery\n    ) {\n        if (!this.shouldUpdate(\"matchGenerateContentHighlights\", query)) {\n            return;\n        }\n        if (\n            this.settings.triggers.matchGenerateContentChanged &&\n            this.settings.triggers.matchGenerateContentHighlightsChanged\n        ) {\n            this.update(query);\n        }\n    }\n\n    public matchGroupingChanged(oldValue: boolean, query: IQuery) {\n        if (!this.shouldUpdate(\"matchGrouping\", query)) {\n            return;\n        }\n        if (this.settings.triggers.matchGroupingChanged) {\n            this.update(query);\n        }\n    }\n\n    public matchOrderByChanged(oldValue: OrderBy, query: IQuery) {\n        if (!this.shouldUpdate(\"matchOrderBy\", query)) {\n            return;\n        }\n        if (this.settings.triggers.matchOrderByChanged) {\n            this.update(query);\n        }\n    }\n\n    public matchPageChanged(oldValue: number, query: IQuery) {\n        if (!this.shouldUpdate(\"matchPage\", query)) {\n            return;\n        }\n        if (this.settings.triggers.matchPageChanged) {\n            this.update(query, null, true);\n        }\n    }\n\n    public matchPageSizeChanged(oldValue: number, query: IQuery) {\n        if (!this.shouldUpdate(\"matchPageSize\", query)) {\n            return;\n        }\n        if (this.settings.triggers.matchPageSizeChanged) {\n            this.update(query);\n        }\n    }\n\n    public queryTextChanged(oldValue: string, query: IQuery) {\n        if (!this.shouldUpdate(\"queryText\", query)) {\n            return;\n        }\n        if (this.settings.triggers.queryChange) {\n            if (\n                query.queryText.trim().length >\n                this.settings.triggers.queryChangeMinLength\n            ) {\n                if (\n                    this.settings.triggers.queryChangeInstantRegex &&\n                    this.settings.triggers.queryChangeInstantRegex.test(\n                        query.queryText\n                    )\n                ) {\n                    this.update(query);\n                    return;\n                } else {\n                    if (this.settings.triggers.queryChangeDelay > -1) {\n                        this.update(\n                            query,\n                            this.settings.triggers.queryChangeDelay\n                        );\n                        return;\n                    }\n                }\n            }\n        }\n        clearTimeout(this.delay);\n    }\n\n    public searchTypeChanged(oldValue: SearchType, query: IQuery) {\n        if (!this.shouldUpdate(\"searchType\", query)) {\n            return;\n        }\n        if (this.settings.triggers.searchTypeChanged) {\n            this.update(query);\n        }\n    }\n\n    public uiLanguageCodeChanged(oldValue: string, query: IQuery) {\n        if (!this.shouldUpdate(\"uiLanguageCode\", query)) {\n            return;\n        }\n        if (this.settings.triggers.uiLanguageCodeChanged) {\n            this.update(query);\n        }\n    }\n}\n"]}