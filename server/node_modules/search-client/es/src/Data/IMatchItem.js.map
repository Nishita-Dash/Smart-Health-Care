{"version":3,"file":"IMatchItem.js","sourceRoot":"","sources":["../../../src/Data/IMatchItem.ts"],"names":[],"mappings":"","sourcesContent":["import { IMetaData } from \"./IMetaData\";\r\n\r\n/**\r\n * Defines the interface for a match-item.\r\n */\r\nexport interface IMatchItem {\r\n    /**\r\n     * Sequential running number per match-item\r\n     */\r\n    $id?: number;\r\n    /**\r\n     * This is the abstract defined in the index for the indexed item, if any.\r\n     */\r\n    abstract: string;\r\n    /**\r\n     * A list of categories that this items is tagged with.\r\n     * Note: The list returned is according to configured rules in the IndexManager. The IndexManager may even be configured to return no categories.\r\n     */\r\n    categories?: string[];\r\n    /**\r\n     * A list of query permissions that matched the item permissions.\r\n     */\r\n    matchedPermissions?: string[];\r\n    /**\r\n     * A list of content paragraphs, that represent the full item in regards to textual content.\r\n     * To get the content, please set the generateContent (and potentially also the generateContentHighlights) settings in the request.\r\n     * Note: The paragraphs returned is according to configured rules in the IndexManager. The IndexManager may even be configured to return no paragraphs.\r\n     */\r\n    content?: string[];\r\n    /**\r\n     * This is the date the item was last modified, according to the indexing solution.\r\n     */\r\n    date: string;\r\n    /**\r\n     * This is the list of extracts that show where some representative hits occurred in the match-item.\r\n     */\r\n    extracts: string[];\r\n    /**\r\n     * This is the instanceId that the match-item was indexed as, if any.\r\n     */\r\n    instanceId: number;\r\n    /**\r\n     * The internalId represents the internal running id for this item in the index.\r\n     */\r\n    internalId: number;\r\n    /**\r\n     * If the match-item is included because the search-query actually matched then this is true.\r\n     * When grouping is on, some hits can be inserted as a parent-context to the real hit. In these scenarios this value is false.\r\n     */\r\n    isTrueMatch: boolean;\r\n    /**\r\n     * Represents the internal unique id for the item, given it's content and state.\r\n     */\r\n    itemId: string;\r\n    /**\r\n     * Any metadata for the item.\r\n     */\r\n    metaList: IMetaData[];\r\n    /**\r\n     * A reference to the item's parent id, if any.\r\n     */\r\n    parentInternalId?: number;\r\n    /**\r\n     * A reference to how many levels of parents this item has.\r\n     */\r\n    parentLevel: number;\r\n    /**\r\n     * The calculated relevance for the item.\r\n     */\r\n    relevance: number;\r\n    /**\r\n     * The name of the source for the item, if any\r\n     */\r\n    sourceName: string;\r\n    /**\r\n     * The title of the item, if any.\r\n     */\r\n    title: string;\r\n    /**\r\n     * The url for the item, if any. UIs normally use this to create direct links to the item in the application which is associated with it.\r\n     */\r\n    url: string;\r\n}\r\n"]}