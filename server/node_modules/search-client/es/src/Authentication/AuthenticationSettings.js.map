{"version":3,"file":"AuthenticationSettings.js","sourceRoot":"","sources":["../../../src/Authentication/AuthenticationSettings.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,YAAY,EAAiB,MAAM,wBAAwB,CAAC;AAErE,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAClE,OAAO,EAAE,yBAAyB,EAAE,MAAM,qCAAqC,CAAC;AAqEhF;;GAEG;AACH;IAA4C,0CAAiB;IA+DzD;;;OAGG;IACH,gCAAY,QAA0C;QAAtD,YACI,iBAAO,SAqDV;QAnDG,2DAA2D;QAC3D,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YAC9B,QAAQ,GAAG,EAAE,OAAO,EAAE,QAAQ,EAA6B,CAAC;SAC/D;QAED,QAAQ,CAAC,OAAO;YACZ,OAAO,QAAQ,CAAC,OAAO,KAAK,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;QAEvE,QAAQ,CAAC,QAAQ;YACb,OAAO,QAAQ,CAAC,QAAQ,KAAK,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;QAEtE,QAAQ,CAAC,WAAW;YAChB,OAAO,QAAQ,CAAC,WAAW,KAAK,WAAW;gBACvC,CAAC,CAAC,QAAQ,CAAC,WAAW;gBACtB,CAAC,CAAC,YAAY,CAAC;QAEvB,iBAAM,IAAI,aAAC,QAAQ,CAAC,CAAC;QAErB,KAAI,CAAC,IAAI;YACL,OAAO,QAAQ,CAAC,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QAEjE,qDAAqD;QACrD,KAAI,CAAC,KAAK;YACN,OAAO,QAAQ,CAAC,KAAK,KAAK,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;QAEvE,KAAI,CAAC,SAAS;YACV,OAAO,QAAQ,CAAC,SAAS,KAAK,WAAW;gBACrC,CAAC,CAAC,QAAQ,CAAC,SAAS;gBACpB,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;QAEvB,KAAI,CAAC,QAAQ,GAAG,IAAI,sBAAsB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAE9D,kDAAkD;QAClD,KAAI,CAAC,gBAAgB,GAAG,yBAAyB,CAAC,IAAI,CAAC;QAEvD,KAAI,CAAC,aAAa;YACd,OAAO,QAAQ,CAAC,aAAa,KAAK,WAAW;gBACzC,CAAC,CAAC,QAAQ,CAAC,aAAa;gBACxB,CAAC,CAAC,KAAK,CAAC;QAEhB,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;QAElC,KAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;QAE1C,KAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;QAE5B,KAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,CAAC;QAEpD,KAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QAExC,KAAI,CAAC,qBAAqB,GAAG,QAAQ,CAAC,qBAAqB,CAAC;;IAChE,CAAC;IACL,6BAAC;AAAD,CAAC,AA1HD,CAA4C,YAAY,GA0HvD","sourcesContent":["import { BaseSettings, IBaseSettings } from \"../Common/BaseSettings\";\r\n\r\nimport { AuthenticationTriggers } from \"./AuthenticationTriggers\";\r\nimport { QueryChangeSpecifications } from \"../Common/QueryChangeSpecifications\";\r\n\r\nexport interface IAuthenticationSettings extends IBaseSettings<any> {\r\n    /**\r\n     * Sets authentication type - jwt or oidc.\r\n     */\r\n    type?: string;\r\n\r\n    /**\r\n     * This is the token, if you need to set an initial value (i.e. if you already have the token)\r\n     */\r\n    token?: string;\r\n\r\n    /**\r\n     * The trigger-settings for when a new auth-token is to be requested.\r\n     */\r\n    triggers?: AuthenticationTriggers;\r\n\r\n    /**\r\n     * This is the path to the value returned by the authentication-call.\r\n     * Should be a name-based lookup array, pointing to where the resulting auth-token is to be found.\r\n     */\r\n    tokenPath?: string[];\r\n\r\n    /**\r\n     * OpenId Connect specific settings\r\n     */\r\n\r\n    /**\r\n     * Sets id of the client registered in identity server\r\n     */\r\n    clientId?: string;\r\n\r\n    /**\r\n     * Sets response type which describes response type to be returned by identity server\r\n     */\r\n    responseType?: string;\r\n\r\n    /**\r\n     * Sets response mode which describes mode of returning data by identity server\r\n     */\r\n    responseMode?: string;\r\n\r\n    /**\r\n     * Sets url for redirect after silent token renew operation\r\n     */\r\n    silentRedirectUri?: string;\r\n\r\n    /**\r\n     * Sets url for redirect after login operation\r\n     */\r\n    redirectUri?: string;\r\n\r\n    /**\r\n     * Sets url for redirect after logout operation\r\n     */\r\n    postLogoutRedirectUri?: string;\r\n\r\n    /**\r\n     * Sets list of scopes requested by client.\r\n     */\r\n    scope?: string;\r\n\r\n    /**\r\n     * Enables logging of OpenId Connect client.\r\n     */\r\n    enableLogging?: boolean;\r\n}\r\n\r\n/**\r\n * These are all the settings that can affect the use of jwt authentication in the search-client.\r\n */\r\nexport class AuthenticationSettings extends BaseSettings<any> {\r\n    /**\r\n     * Sets authentication type - jwt or oidc.\r\n     */\r\n    public type?: string;\r\n\r\n    /**\r\n     * This is the token, if you need to set an initial value (i.e. if you already have the token)\r\n     * Default: Undefined\r\n     */\r\n    public token?: string;\r\n\r\n    /**\r\n     * This is the path to the value returned by the authentication-call.\r\n     * Should be a name-based lookup array, pointing to where the resulting auth-token is to be found.\r\n     * Default: [\"jwtToken\"]\r\n     */\r\n    public tokenPath?: string[];\r\n\r\n    /**\r\n     * The trigger-settings for when a new auth-token is to be requested.\r\n     */\r\n    public triggers: AuthenticationTriggers;\r\n\r\n    /**\r\n     * OpenId Connect specific settings\r\n     */\r\n\r\n    /**\r\n     * Sets id of the client registered in identity server\r\n     */\r\n    public clientId?: string;\r\n\r\n    /**\r\n     * Sets response type which describes response type to be returned by identity server\r\n     */\r\n    public responseType?: string;\r\n\r\n    /**\r\n     * Sets url for redirect after silent token renew operation\r\n     */\r\n    public silentRedirectUri?: string;\r\n\r\n    /**\r\n     * Sets url for redirect after login operation\r\n     */\r\n    public redirectUri?: string;\r\n\r\n    /**\r\n     * Sets url for redirect after logout operation\r\n     */\r\n    public postLogoutRedirectUri?: string;\r\n\r\n    /**\r\n     * Sets list of scopes requested by client.\r\n     */\r\n    public scope?: string;\r\n\r\n    /**\r\n     * Enables logging of OpenId Connect client.\r\n     */\r\n    public enableLogging?: boolean;\r\n\r\n    /**\r\n     * Creates an AuthenticationSettings object for you, based on AuthenticationSettings defaults and the overrides provided as a param.\r\n     * @param settings - The settings defined here will override the default AuthenticationSettings.\r\n     */\r\n    constructor(settings: IAuthenticationSettings | string) {\r\n        super(); // dummy (using init instead)\r\n\r\n        // Setup settings object before calling super.init with it.\r\n        if (typeof settings === \"string\") {\r\n            settings = { baseUrl: settings } as IAuthenticationSettings;\r\n        }\r\n\r\n        settings.enabled =\r\n            typeof settings.enabled !== \"undefined\" ? settings.enabled : false;\r\n\r\n        settings.basePath =\r\n            typeof settings.basePath !== \"undefined\" ? settings.basePath : \"\";\r\n\r\n        settings.servicePath =\r\n            typeof settings.servicePath !== \"undefined\"\r\n                ? settings.servicePath\r\n                : \"auth/login\";\r\n\r\n        super.init(settings);\r\n\r\n        this.type =\r\n            typeof settings.type !== \"undefined\" ? settings.type : \"jwt\";\r\n\r\n        // Setup our own stuff (props not in the base class).\r\n        this.token =\r\n            typeof settings.token !== \"undefined\" ? settings.token : undefined;\r\n\r\n        this.tokenPath =\r\n            typeof settings.tokenPath !== \"undefined\"\r\n                ? settings.tokenPath\r\n                : [\"jwtToken\"];\r\n\r\n        this.triggers = new AuthenticationTriggers(settings.triggers);\r\n\r\n        // No query changes will trigger outdated warnings\r\n        this.queryChangeSpecs = QueryChangeSpecifications.none;\r\n\r\n        this.enableLogging =\r\n            typeof settings.enableLogging !== 'undefined'\r\n                ? settings.enableLogging\r\n                : false;\r\n\r\n        this.clientId = settings.clientId;\r\n\r\n        this.responseType = settings.responseType;\r\n\r\n        this.scope = settings.scope;\r\n\r\n        this.silentRedirectUri = settings.silentRedirectUri;\r\n\r\n        this.redirectUri = settings.redirectUri;\r\n\r\n        this.postLogoutRedirectUri = settings.postLogoutRedirectUri;\r\n    }\r\n}\r\n"]}