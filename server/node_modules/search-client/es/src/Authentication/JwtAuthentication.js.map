{"version":3,"file":"JwtAuthentication.js","sourceRoot":"","sources":["../../../src/Authentication/JwtAuthentication.ts"],"names":[],"mappings":"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","sourcesContent":["import * as jwt from \"jwt-simple\";\r\n\r\nimport { BaseCall, Fetch, Query } from \"../Common\";\r\nimport {\r\n    AuthenticationSettings,\r\n    IAuthenticationSettings\r\n} from \"./AuthenticationSettings\";\r\nimport { Authentication } from \"./Authentication\";\r\nimport { AuthToken } from \"./AuthToken\";\r\n\r\n/**\r\n * The JwtAuthentication service is a supporting feature for the other services.\r\n * Typically used via the [[SearchClient.constructor]] and by providing [[AuthenticationSettings]] settings in\r\n * the [[Settings.authentication]] property.\r\n *\r\n * The authentication system is based on JWT and needs an end-point to be configured from where it will get its\r\n * authentication-token. This service will be monitoring the token-value to see if it is either missing or\r\n * expired. When that happens a new token will be fetched from the end-point. The [[AuthenticationSettings.expiryOverlap]]\r\n * object controls how long before expiration the new token is to be fetched.\r\n */\r\nexport class JwtAuthentication extends BaseCall<any> implements Authentication {\r\n    public settings: IAuthenticationSettings;\r\n\r\n    /**\r\n     * Creates an JwtAuthentication object that knows where to get the auth-token and when to refresh it.\r\n     * @param settings - The settings for the authentication object.\r\n     * @param auth - An object that controls the authentication for the lookups.\r\n     */\r\n    constructor(\r\n        settings: IAuthenticationSettings | string,\r\n        auth?: AuthToken,\r\n        fetchMethod?: Fetch\r\n    ) {\r\n        super(); // dummy\r\n\r\n        // prepare for super.init\r\n        if (typeof settings === \"string\") {\r\n            settings = { baseUrl: settings, type: \"jwt\" } as IAuthenticationSettings;\r\n        } else {\r\n            settings.type = \"jwt\";\r\n        }\r\n\r\n        settings = new AuthenticationSettings(settings);\r\n        auth = auth || new AuthToken();\r\n        super.init(settings, auth, fetchMethod);\r\n\r\n        // Set own this props\r\n        if (settings.token) {\r\n            //this.auth.authenticationToken = settings.token;\r\n            let token = settings.token;\r\n            this.auth.tokenResolver = () =>  token;\r\n            settings.token = undefined;\r\n            this.setupRefresh();\r\n        } else if (settings.enabled) {\r\n            // We authenticate immediately in order to have the token in place when the first calls come in.\r\n            this.update(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetches the authentication-token from the server.\r\n     * @param query - For the Authentication service this parameter is ignored.\r\n     * @param suppressCallbacks - Set to true if you have defined callbacks, but somehow don't want them to be called.\r\n     * @returns a promise that when resolved returns a jwt token.\r\n     */\r\n    public fetch(\r\n        query: Query = new Query(),\r\n        suppressCallbacks: boolean = false\r\n    ): Promise<string> {\r\n        const reqInit = this.requestObject(false);\r\n        if (this.cbRequest(suppressCallbacks, this.settings.url, reqInit)) {\r\n            return this.fetchMethod(this.settings.url, reqInit)\r\n                .then((response: Response) => {\r\n                    if (!response.ok) {\r\n                        throw Error(\r\n                            `${response.status} ${\r\n                                response.statusText\r\n                            } for request url '${this.settings.url}'`\r\n                        );\r\n                    }\r\n                    return response.json();\r\n                })\r\n                .then((data: any) => {\r\n                    // Find the auth token by using the settings for where it is in the structure.\r\n                    for (let i of this.settings.tokenPath) {\r\n                        data = data[i];\r\n                    }\r\n\r\n                    // Update the token\r\n                    this.auth.tokenResolver = () =>  data;\r\n\r\n                    // Set up a timer for refreshing the token before/if it expires.\r\n                    this.setupRefresh();\r\n\r\n                    this.cbSuccess(\r\n                        suppressCallbacks,\r\n                        this.auth.authenticationToken,\r\n                        this.settings.url,\r\n                        reqInit\r\n                    );\r\n                    return this.auth.authenticationToken;\r\n                })\r\n                .catch(error => {\r\n                    this.cbError(\r\n                        suppressCallbacks,\r\n                        error,\r\n                        this.settings.url,\r\n                        reqInit\r\n                    );\r\n                    throw error;\r\n                });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Call the service, but take into account deferredUpdates.\r\n     *\r\n     * @param query The query object to create the fetch for.\r\n     * @param delay A delay for when to execute the update, in milliseconds. Defaults to undefined.\r\n     */\r\n    public update(query: Query, delay?: number): void {\r\n        if (this.deferUpdate) {\r\n            // Save the query, so that when the deferUpdate is again false we can then execute it.\r\n            this.deferredQuery = query;\r\n        } else {\r\n            // In case this action is triggered when a delayed execution is already pending, clear that pending timeout.\r\n            clearTimeout(this.delay);\r\n\r\n            if (delay > 0) {\r\n                // Set up the delay\r\n                this.delay = setTimeout(() => {\r\n                    let fetchPromise = this.fetch(query);\r\n                    if (fetchPromise) {\r\n                        fetchPromise.catch(error => Promise.resolve(null));\r\n                    }\r\n                }, delay) as any;\r\n            } else {\r\n                let fetchPromise = this.fetch(query);\r\n                if (fetchPromise) {\r\n                    fetchPromise.catch(error => Promise.resolve(null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private setupRefresh() {\r\n        try {\r\n            if (this.auth && this.auth.authenticationToken) {\r\n                let token = jwt.decode(\r\n                    this.auth.authenticationToken,\r\n                    null,\r\n                    true\r\n                );\r\n                let expiration = token.exp\r\n                    ? new Date(token.exp * 1000)\r\n                    : undefined;\r\n                if (expiration) {\r\n                    let remainingSeconds =\r\n                        (expiration.valueOf() - new Date().valueOf()) / 1000;\r\n                    remainingSeconds = Math.max(\r\n                        remainingSeconds - this.settings.triggers.expiryOverlap,\r\n                        0\r\n                    );\r\n\r\n                    // console.log(\r\n                    //     `Setting up JWT-token to refresh in ${remainingSeconds} seconds, at ${expiration}.`,\r\n                    //     \"Token:\",\r\n                    //     token\r\n                    // );\r\n                    setTimeout(() => {\r\n                        this.update(null);\r\n                    }, remainingSeconds * 1000);\r\n                } else {\r\n                    // console.log(\r\n                    //     \"The received JWT token does not expire.\",\r\n                    //     \"Token:\",\r\n                    //     token\r\n                    // );\r\n                }\r\n            }\r\n        } catch (e) {\r\n            console.error(\r\n                `Unable to parse the provided token '${\r\n                    this.auth.authenticationToken\r\n                }': ${e}`\r\n            );\r\n        }\r\n    }\r\n}\r\n"]}