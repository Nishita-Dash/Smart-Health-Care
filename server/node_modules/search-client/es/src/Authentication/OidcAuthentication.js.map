{"version":3,"file":"OidcAuthentication.js","sourceRoot":"","sources":["../../../src/Authentication/OidcAuthentication.ts"],"names":[],"mappings":"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","sourcesContent":["import OIDC, { UserManagerSettings } from \"oidc-client\";\r\n\r\nimport { BaseCall, Fetch, Query } from \"../Common\";\r\nimport {\r\n    AuthenticationSettings,\r\n    IAuthenticationSettings\r\n} from \"./AuthenticationSettings\";\r\nimport { Authentication } from \"./Authentication\";\r\nimport { AuthToken } from \"./AuthToken\";\r\n\r\n/**\r\n * The OidcAuthentication service is a supporting feature for the other services.\r\n * Typically used via the [[SearchClient.constructor]] and by providing [[AuthenticationSettings]] settings in\r\n * the [[Settings.authentication]] property.\r\n *\r\n * The authentication system is based on OpenId Connect and needs an end-point to be configured supporting full\r\n * oidc flows. This service will be monitoring the token-value to see if it is either missing or\r\n * expired. When that happens a new token will be fetched from the oidc end-point.\r\n */\r\nexport class OidcAuthentication extends BaseCall<any> implements Authentication {\r\n\r\n    static handleSilentSignin(responseMode: string): void {              \r\n        let mgr = new OIDC.UserManager({ loadUserInfo: true, filterProtocolClaims: true, response_mode: responseMode, userStore: new OIDC.WebStorageStateStore({ store: window.sessionStorage }) });\r\n        mgr.signinSilentCallback();\r\n        mgr.clearStaleState();\r\n    }\r\n\r\n    static handleSigninRedirect(responseMode: string, callback: (state: any) => any): void {            \r\n        let mgr = new OIDC.UserManager({ loadUserInfo: true, filterProtocolClaims: true, response_mode: responseMode, userStore: new OIDC.WebStorageStateStore({ store: window.sessionStorage }) });\r\n\r\n        mgr.signinRedirectCallback().then(user => {       \r\n            callback(user.state);\r\n            mgr.clearStaleState();\r\n        });\r\n    }\r\n\r\n    public settings: IAuthenticationSettings;   \r\n\r\n    private user: OIDC.UserManager;\r\n\r\n    private oidcSettings: UserManagerSettings;\r\n\r\n    /**\r\n     * Creates an OidcAuthentication object that knows where to get the auth-token and when to refresh it.\r\n     * @param settings - The settings for the authentication object.\r\n     * @param auth - An object that controls the authentication for the lookups.\r\n     */\r\n    constructor(\r\n        settings: IAuthenticationSettings | string,\r\n        auth?: AuthToken,\r\n        fetchMethod?: Fetch\r\n    ) {\r\n        super(); // dummy\r\n       \r\n        // prepare for super.init\r\n        if (typeof settings === \"string\") {\r\n            settings = { baseUrl: settings, type: \"oidc\" } as IAuthenticationSettings;\r\n        } else {\r\n            settings.type = \"oidc\";\r\n        }\r\n\r\n        settings = new AuthenticationSettings(settings);\r\n        auth = auth || new AuthToken();\r\n        super.init(settings, auth, fetchMethod);\r\n\r\n        this.oidcSettings = {            \r\n            authority: settings.url,\r\n            client_id: settings.clientId,\r\n            response_type: settings.responseType,\r\n            scope: settings.scope,\r\n            silent_redirect_uri: settings.silentRedirectUri,\r\n            redirect_uri: settings.redirectUri,\r\n            post_logout_redirect_uri: settings.postLogoutRedirectUri,\r\n            automaticSilentRenew: true,\r\n            loadUserInfo: true,\r\n            userStore: new OIDC.WebStorageStateStore({ store: window.sessionStorage })\r\n        };\r\n        \r\n        this.user = new OIDC.UserManager(this.oidcSettings);\r\n        \r\n        this.user.events.addSilentRenewError(() => {\r\n            this.login(this.user);           \r\n        });\r\n\r\n        this.user.events.addAccessTokenExpired(() => {\r\n            this.login(this.user);\r\n        });\r\n\r\n        this.user.events.addUserSignedOut(() => {    \r\n            this.login(this.user);\r\n        });\r\n        \r\n        if (this.settings.enableLogging) {\r\n            OIDC.Log.logger = console;\r\n            OIDC.Log.level = OIDC.Log.INFO;\r\n        }\r\n\r\n        if (settings.enabled) {\r\n            // We authenticate immediately in order to have the token in place when the first calls come in.\r\n            this.update(null);\r\n        }\r\n    }\r\n        \r\n    /**\r\n     * Fetches the authentication-token from the oidc server.\r\n     * @param query - For the Authentication service this parameter is ignored.\r\n     * @param suppressCallbacks - Set to true if you have defined callbacks, but somehow don't want them to be called.\r\n     * @returns a promise that when resolved returns a jwt token.\r\n     */\r\n    public fetch(\r\n        query: Query = new Query(),\r\n        suppressCallbacks: boolean = false\r\n    ): Promise<string> {       \r\n        const reqInit = this.requestObject(false);\r\n        if (this.cbRequest(suppressCallbacks, this.settings.url, reqInit)) {            \r\n            return this.user.getUser().then(user => {                  \r\n                if (!user) {\r\n                    this.login(this.user);\r\n                } else {\r\n                    // Update the token\r\n                    this.auth.tokenResolver = () => {                         \r\n                       let oidcKey = `oidc.user:${this.oidcSettings.authority}:${this.oidcSettings.client_id}`;                       \r\n                       return JSON.parse(window.sessionStorage.getItem(oidcKey)).access_token;                        \r\n                    };\r\n                    \r\n                    this.cbSuccess(\r\n                        suppressCallbacks,\r\n                        this.auth.authenticationToken,\r\n                        this.settings.url,\r\n                        reqInit\r\n                    );\r\n                  \r\n                    return user.access_token;\r\n                }          \r\n            }).catch(error => {\r\n                this.cbError(\r\n                    suppressCallbacks,\r\n                    error,\r\n                    this.settings.url,\r\n                    reqInit\r\n                );\r\n                throw error;\r\n            });\r\n        } else {\r\n            return Promise.resolve(null);    \r\n        }                     \r\n    }\r\n\r\n    /**\r\n     * Call the service, but take into account deferredUpdates.\r\n     *\r\n     * @param query The query object to create the fetch for.\r\n     * @param delay A delay for when to execute the update, in milliseconds. Defaults to undefined.\r\n     */\r\n    public update(query: Query, delay?: number): void {\r\n        if (this.deferUpdate) {\r\n            // Save the query, so that when the deferUpdate is again false we can then execute it.\r\n            this.deferredQuery = query;\r\n        } else {\r\n            // In case this action is triggered when a delayed execution is already pending, clear that pending timeout.\r\n            clearTimeout(this.delay);\r\n\r\n            if (delay > 0) {\r\n                // Set up the delay\r\n                this.delay = setTimeout(() => {\r\n                    let fetchPromise = this.fetch(query);\r\n                    if (fetchPromise) {\r\n                        fetchPromise.catch(error => Promise.resolve(null));\r\n                    }\r\n                }, delay) as any;\r\n            } else {\r\n                let fetchPromise = this.fetch(query);\r\n                if (fetchPromise) {\r\n                    fetchPromise.catch(error => Promise.resolve(null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    private login(userManager: OIDC.UserManager) {\r\n        userManager.createSigninRequest({ data: { currentUrl: window.location.href } })\r\n        .then((response) => {\r\n            window.location.href = response.url;\r\n        });     \r\n    }\r\n}\r\n"]}