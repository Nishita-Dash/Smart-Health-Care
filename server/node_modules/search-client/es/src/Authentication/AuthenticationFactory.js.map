{"version":3,"file":"AuthenticationFactory.js","sourceRoot":"","sources":["../../../src/Authentication/AuthenticationFactory.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAC1D,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAOxD;IAAA;IAsBA,CAAC;IArBQ,sCAAM,GAAb,UAAc,QAAiC,EACjC,IAAgB,EAChB,WAAmB;QAC/B,IAAI,QAAQ,CAAC,IAAI,KAAK,MAAM,EAAE;YAC1B,IAAM,kBAAkB,GAAG,IAAI,kBAAkB,CAC7C,QAAQ,EACR,IAAI,EACJ,WAAW,CACd,CAAC;YACF,OAAO,kBAAkB,CAAC;SAC7B;aAAM,IAAI,QAAQ,CAAC,IAAI,KAAK,KAAK,EAAE;YAChC,IAAM,iBAAiB,GAAG,IAAI,iBAAiB,CAC3C,QAAQ,EACR,IAAI,EACJ,WAAW,CACd,CAAC;YACF,OAAO,iBAAiB,CAAC;SAC5B;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;SACvE;IACH,CAAC;IACH,4BAAC;AAAD,CAAC,AAtBD,IAsBC","sourcesContent":["import { AuthToken } from \"./AuthToken\";\r\nimport { OidcAuthentication } from \"./OidcAuthentication\";\r\nimport { JwtAuthentication } from \"./JwtAuthentication\";\r\nimport { Fetch } from \"../Common\";\r\n\r\nimport {    \r\n    IAuthenticationSettings\r\n} from \"./AuthenticationSettings\";\r\n\r\nexport class AuthenticationFactory {\r\n  public create(settings: IAuthenticationSettings,\r\n                auth?: AuthToken,\r\n                fetchMethod?: Fetch): JwtAuthentication | OidcAuthentication {    \r\n    if (settings.type === \"oidc\") {\r\n        const oidcAuthentication = new OidcAuthentication(\r\n            settings,\r\n            auth,\r\n            fetchMethod\r\n        );\r\n        return oidcAuthentication;\r\n    } else if (settings.type === \"jwt\") {\r\n        const jwtAuthentication = new JwtAuthentication(\r\n            settings,\r\n            auth,\r\n            fetchMethod\r\n        );\r\n        return jwtAuthentication;\r\n    } else {\r\n      throw new Error('Select either a OIDC or a JWT authentication type.');\r\n    }\r\n  }\r\n}"]}