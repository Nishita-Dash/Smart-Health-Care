{"version":3,"file":"CategorizeTriggers.js","sourceRoot":"","sources":["../../../src/Categorize/CategorizeTriggers.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH;IAmFI;;;;OAIG;IACH,4BAAY,QAAiC;QAAjC,yBAAA,EAAA,aAAiC;QACzC,IAAI,CAAC,yBAAyB;YAC1B,OAAO,QAAQ,CAAC,yBAAyB,KAAK,WAAW;gBACrD,CAAC,CAAC,QAAQ,CAAC,yBAAyB;gBACpC,CAAC,CAAC,IAAI,CAAC;QAEf,IAAI,CAAC,eAAe;YAChB,OAAO,QAAQ,CAAC,eAAe,KAAK,WAAW;gBAC3C,CAAC,CAAC,QAAQ,CAAC,eAAe;gBAC1B,CAAC,CAAC,IAAI,CAAC;QAEf,IAAI,CAAC,eAAe;YAChB,OAAO,QAAQ,CAAC,eAAe,KAAK,WAAW;gBAC3C,CAAC,CAAC,QAAQ,CAAC,eAAe;gBAC1B,CAAC,CAAC,IAAI,CAAC;QAEf,IAAI,CAAC,aAAa;YACd,OAAO,QAAQ,CAAC,aAAa,KAAK,WAAW;gBACzC,CAAC,CAAC,QAAQ,CAAC,aAAa;gBACxB,CAAC,CAAC,IAAI,CAAC;QAEf,IAAI,CAAC,cAAc;YACf,OAAO,QAAQ,CAAC,cAAc,KAAK,WAAW;gBAC1C,CAAC,CAAC,QAAQ,CAAC,cAAc;gBACzB,CAAC,CAAC,IAAI,CAAC;QAEf,IAAI,CAAC,WAAW;YACZ,OAAO,QAAQ,CAAC,WAAW,KAAK,WAAW;gBACvC,CAAC,CAAC,QAAQ,CAAC,WAAW;gBACtB,CAAC,CAAC,KAAK,CAAC;QAEhB,IAAI,CAAC,gBAAgB;YACjB,OAAO,QAAQ,CAAC,gBAAgB,KAAK,WAAW;gBAC5C,CAAC,CAAC,QAAQ,CAAC,gBAAgB;gBAC3B,CAAC,CAAC,IAAI,CAAC;QAEf,IAAI,CAAC,uBAAuB;YACxB,OAAO,QAAQ,CAAC,uBAAuB,KAAK,WAAW;gBACnD,CAAC,CAAC,QAAQ,CAAC,uBAAuB;gBAClC,CAAC,CAAC,OAAO,CAAC;QAElB,IAAI,CAAC,oBAAoB;YACrB,OAAO,QAAQ,CAAC,oBAAoB,KAAK,WAAW;gBAChD,CAAC,CAAC,QAAQ,CAAC,oBAAoB;gBAC/B,CAAC,CAAC,CAAC,CAAC;QAEZ,IAAI,CAAC,iBAAiB;YAClB,OAAO,QAAQ,CAAC,iBAAiB,KAAK,WAAW;gBAC7C,CAAC,CAAC,QAAQ,CAAC,iBAAiB;gBAC5B,CAAC,CAAC,IAAI,CAAC;QAEf,IAAI,CAAC,qBAAqB;YACtB,OAAO,QAAQ,CAAC,qBAAqB,KAAK,WAAW;gBACjD,CAAC,CAAC,QAAQ,CAAC,qBAAqB;gBAChC,CAAC,CAAC,IAAI,CAAC;IACnB,CAAC;IACL,yBAAC;AAAD,CAAC,AAhJD,IAgJC","sourcesContent":["/**\r\n * These are the triggers that define when and when not to trigger a categorize lookup.\r\n */\r\nexport class CategorizeTriggers {\r\n    /**\r\n     * Triggers when the categorizationType has changed.\r\n     * Default: true\r\n     */\r\n    public categorizationTypeChanged?: boolean;\r\n\r\n    /**\r\n     * Triggers when the clientId property has changed.\r\n     * Default: true\r\n     */\r\n    public clientIdChanged?: boolean;\r\n\r\n    /**\r\n     * Triggers when the from date property has changed.\r\n     * Default: true\r\n     */\r\n    public dateFromChanged?: boolean;\r\n\r\n    /**\r\n     * Triggers when the to date property has changed.\r\n     * Default: true\r\n     */\r\n    public dateToChanged?: boolean;\r\n\r\n    /**\r\n     * Triggers when the filter property has changed.\r\n     * Default: true\r\n     */\r\n    public filtersChanged?: boolean;\r\n\r\n    /**\r\n     * Turns on or off all query-related triggers.\r\n     * Default: false\r\n     */\r\n    public queryChange?: boolean;\r\n\r\n    /**\r\n     * Delay triggers until changes has not been made to the query for a certain time (milliseconds).\r\n     * This is to avoid executing searches constantly while the user is typing.\r\n     * The queryChangeInstantRegex has precedence. This delay is only considered when that regex doesn't match.\r\n     * Set value to less than zero to make sure we only trigger when the queryChangeInstantRegex matches.\r\n     *\r\n     * Note: Requires queryChange to be true.\r\n     * Note: Requires query to be longer than queryMinLength.\r\n     *\r\n     * Default: 2000 - Run delayed lookups after 2 seconds.\r\n     * Note: Queries matching the queryChangeInstantRegex will run immediately though.\r\n     */\r\n    public queryChangeDelay?: number;\r\n\r\n    /**\r\n     * Triggers action immediately instead of delayed when the query matches the regex.\r\n     *\r\n     * Note: Requires queryChange to be true.\r\n     * Note: Requires query to be longer than queryMinLength.\r\n     *\r\n     * Default: /\\S\\s$/ - Trigger on first ENTER or SPACE. Sample: https://regex101.com/r/P0xfej/2\r\n     */\r\n    public queryChangeInstantRegex?: RegExp;\r\n\r\n    /**\r\n     * Min length before triggering. For Categorize (and Find) this should be ok with short queries too.\r\n     * One character followed by an enter (default).\r\n     *\r\n     * Note: Requires queryChange to be true.\r\n     *\r\n     * Default: 2\r\n     */\r\n    public queryChangeMinLength?: number;\r\n\r\n    /**\r\n     * Triggers when the searchType property has changed. Default: true\r\n     * Default: true\r\n     */\r\n    public searchTypeChanged?: boolean;\r\n\r\n    /**\r\n     * Triggers when the uiLanguageCode property has changed.\r\n     * Default: true - Re-fetch on change - as the categories normally are translated.\r\n     */\r\n    public uiLanguageCodeChanged?: boolean;\r\n\r\n    /**\r\n     * Creates a CategorizeTrigger object for you, based on CategorizeTrigger defaults and the overrides provided as a param.\r\n     *\r\n     * @param triggers - The triggers defined here will override the default CategorizeTrigger.\r\n     */\r\n    constructor(triggers: CategorizeTriggers = {}) {\r\n        this.categorizationTypeChanged =\r\n            typeof triggers.categorizationTypeChanged !== \"undefined\"\r\n                ? triggers.categorizationTypeChanged\r\n                : true;\r\n\r\n        this.clientIdChanged =\r\n            typeof triggers.clientIdChanged !== \"undefined\"\r\n                ? triggers.clientIdChanged\r\n                : true;\r\n\r\n        this.dateFromChanged =\r\n            typeof triggers.dateFromChanged !== \"undefined\"\r\n                ? triggers.dateFromChanged\r\n                : true;\r\n\r\n        this.dateToChanged =\r\n            typeof triggers.dateToChanged !== \"undefined\"\r\n                ? triggers.dateToChanged\r\n                : true;\r\n\r\n        this.filtersChanged =\r\n            typeof triggers.filtersChanged !== \"undefined\"\r\n                ? triggers.filtersChanged\r\n                : true;\r\n\r\n        this.queryChange =\r\n            typeof triggers.queryChange !== \"undefined\"\r\n                ? triggers.queryChange\r\n                : false;\r\n\r\n        this.queryChangeDelay =\r\n            typeof triggers.queryChangeDelay !== \"undefined\"\r\n                ? triggers.queryChangeDelay\r\n                : 2000;\r\n\r\n        this.queryChangeInstantRegex =\r\n            typeof triggers.queryChangeInstantRegex !== \"undefined\"\r\n                ? triggers.queryChangeInstantRegex\r\n                : /\\S\\s$/;\r\n\r\n        this.queryChangeMinLength =\r\n            typeof triggers.queryChangeMinLength !== \"undefined\"\r\n                ? triggers.queryChangeMinLength\r\n                : 2;\r\n\r\n        this.searchTypeChanged =\r\n            typeof triggers.searchTypeChanged !== \"undefined\"\r\n                ? triggers.searchTypeChanged\r\n                : true;\r\n\r\n        this.uiLanguageCodeChanged =\r\n            typeof triggers.uiLanguageCodeChanged !== \"undefined\"\r\n                ? triggers.uiLanguageCodeChanged\r\n                : true;\r\n    }\r\n}\r\n"]}