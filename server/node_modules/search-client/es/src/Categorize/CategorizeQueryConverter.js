import { __extends } from "tslib";
import { BaseQueryConverter, CategorizationType } from "../Common";
/**
 * Class to handle creating categorize lookups.
 */
var CategorizeQueryConverter = /** @class */ (function (_super) {
    __extends(CategorizeQueryConverter, _super);
    function CategorizeQueryConverter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Converts the query params to an array of key=value segments.
     */
    CategorizeQueryConverter.prototype.getUrlParams = function (query) {
        var params = [];
        this.addParamIfSet(params, "c", query.clientId);
        this.addParamIfSet(params, "df", this.createDate(query.dateFrom));
        this.addParamIfSet(params, "dt", this.createDate(query.dateTo));
        var filters = query.filters.map(function (f) {
            return f.category.categoryName.join("|");
        });
        this.addParamIfSet(params, "f", filters.join(";"));
        this.addParamIfSet(params, "q", query.queryText);
        this.addParamIfSet(params, "t", query.searchType);
        this.addParamIfSet(params, "l", query.uiLanguageCode);
        this.addParamIfSet(params, "ct", CategorizationType[query.categorizationType]);
        return params;
    };
    return CategorizeQueryConverter;
}(BaseQueryConverter));
export { CategorizeQueryConverter };
//# sourceMappingURL=CategorizeQueryConverter.js.map