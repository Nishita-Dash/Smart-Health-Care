{"version":3,"file":"CategorizeSettings.js","sourceRoot":"","sources":["../../../src/Categorize/CategorizeSettings.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,YAAY,EAAiB,MAAM,WAAW,CAAC;AAExD,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAC1D,OAAO,EAEH,oBAAoB,EACvB,MAAM,gCAAgC,CAAC;AACxC,OAAO,EAAE,yBAAyB,EAAE,MAAM,qCAAqC,CAAC;AAoBhF;;GAEG;AACH;IAAwC,sCAAyB;IAiB7D;;;OAGG;IACH,4BAAY,QAAsC;QAAlD,YACI,iBAAO,SA0CV;QAzCG,2DAA2D;QAC3D,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YAC9B,QAAQ,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAyB,CAAC;SAC3D;QACD,QAAQ,CAAC,WAAW;YAChB,OAAO,QAAQ,CAAC,WAAW,KAAK,WAAW;gBACvC,CAAC,CAAC,QAAQ,CAAC,WAAW;gBACtB,CAAC,CAAC,mBAAmB,CAAC;QAC9B,iBAAM,IAAI,aAAC,QAAQ,CAAC,CAAC;QAErB,qDAAqD;QACrD,qCAAqC;QACrC,kEAAkE;QAClE,iDAAiD;QACjD,iBAAiB;QAEjB,KAAI,CAAC,QAAQ,GAAG,IAAI,kBAAkB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAE1D,KAAI,CAAC,aAAa,GAAG,EAA6B,CAAC;QACnD,IAAI,OAAO,QAAQ,CAAC,aAAa,KAAK,WAAW,EAAE;YAC/C,KAAK,IAAI,GAAG,IAAI,QAAQ,CAAC,aAAa,EAAE;gBACpC,IAAI,QAAQ,CAAC,aAAa,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;oBAC5C,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,IAAI,oBAAoB,CAC9C,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAC9B,CAAC;iBACL;aACJ;SACJ;QAED,2FAA2F;QAC3F,KAAI,CAAC,gBAAgB;YACjB,OAAO,QAAQ,CAAC,gBAAgB,KAAK,WAAW;gBAC5C,CAAC,CAAC,QAAQ,CAAC,gBAAgB;gBAC3B,CAAC,CAAC,yBAAyB,CAAC,kBAAkB;oBAC5C,yBAAyB,CAAC,QAAQ;oBAClC,yBAAyB,CAAC,QAAQ;oBAClC,yBAAyB,CAAC,MAAM;oBAChC,yBAAyB,CAAC,OAAO;oBACjC,yBAAyB,CAAC,SAAS;oBACnC,yBAAyB,CAAC,UAAU;oBACpC,yBAAyB,CAAC,cAAc,CAAC;;IACvD,CAAC;IACL,yBAAC;AAAD,CAAC,AAjED,CAAwC,YAAY,GAiEnD","sourcesContent":["import { BaseSettings, IBaseSettings } from \"../Common\";\r\nimport { ICategories } from \"../Data\";\r\nimport { CategorizeTriggers } from \"./CategorizeTriggers\";\r\nimport {\r\n    CategoryPresentationMap,\r\n    CategoryPresentation\r\n} from \"../Common/CategoryPresentation\";\r\nimport { QueryChangeSpecifications } from \"../Common/QueryChangeSpecifications\";\r\n\r\nexport interface ICategorizeSettings extends IBaseSettings<ICategories> {\r\n    /**\r\n     * This is the separator-character that is used when comparing the clientCategoryFilter. You need to use this\r\n     * to join categoryName arrays in the filter section. See [[SearchClient.clientCategoryFilter]].\r\n     */\r\n    clientCategoryFilterSepChar?: string;\r\n\r\n    /**\r\n     * The trigger-settings for when automatic category-updates are to be triggered.\r\n     */\r\n    triggers?: CategorizeTriggers;\r\n\r\n    /**\r\n     * Settings that dictate the presentation of the categories.\r\n     */\r\n    presentations?: CategoryPresentationMap;\r\n}\r\n\r\n/**\r\n * These are all the settings that can affect the returned categories for categorize() lookups.\r\n */\r\nexport class CategorizeSettings extends BaseSettings<ICategories> {\r\n    /**\r\n     * This is the separator-character that is used when comparing the clientCategoryFilter. You need to use this\r\n     * to join categoryName arrays in the filter section. See [[SearchClient.clientCategoryFilter]].\r\n     */\r\n    //public clientCategoryFilterSepChar?: string;\r\n\r\n    /**\r\n     * The trigger-settings for when automatic category result-updates are to be triggered.\r\n     */\r\n    public triggers: CategorizeTriggers;\r\n\r\n    /**\r\n     * Settings that dictate the presentation of the categories.\r\n     */\r\n    presentations?: CategoryPresentationMap;\r\n\r\n    /**\r\n     * Creates an instance of CategorizeSettings, based on CategorizeSettings defaults and the overrides provided as a param.\r\n     * @param settings - The settings defined here will override the default CategorizeSettings.\r\n     */\r\n    constructor(settings: ICategorizeSettings | string) {\r\n        super(); // dummy (using init instead)\r\n        // Setup settings object before calling super.init with it.\r\n        if (typeof settings === \"string\") {\r\n            settings = { baseUrl: settings } as ICategorizeSettings;\r\n        }\r\n        settings.servicePath =\r\n            typeof settings.servicePath !== \"undefined\"\r\n                ? settings.servicePath\r\n                : \"search/categorize\";\r\n        super.init(settings);\r\n\r\n        // Setup our own stuff (props not in the base class).\r\n        // this.clientCategoryFilterSepChar =\r\n        //     typeof settings.clientCategoryFilterSepChar !== \"undefined\"\r\n        //         ? settings.clientCategoryFilterSepChar\r\n        //         : \"_\";\r\n\r\n        this.triggers = new CategorizeTriggers(settings.triggers);\r\n\r\n        this.presentations = {} as CategoryPresentationMap;\r\n        if (typeof settings.presentations !== \"undefined\") {\r\n            for (let key in settings.presentations) {\r\n                if (settings.presentations.hasOwnProperty(key)) {\r\n                    this.presentations[key] = new CategoryPresentation(\r\n                        settings.presentations[key]\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        // A change in any of the defined fields should indicate that the results may have changed.\r\n        this.queryChangeSpecs =\r\n            typeof settings.queryChangeSpecs !== \"undefined\"\r\n                ? settings.queryChangeSpecs\r\n                : QueryChangeSpecifications.categorizationType |\r\n                  QueryChangeSpecifications.clientId |\r\n                  QueryChangeSpecifications.dateFrom |\r\n                  QueryChangeSpecifications.dateTo |\r\n                  QueryChangeSpecifications.filters |\r\n                  QueryChangeSpecifications.queryText |\r\n                  QueryChangeSpecifications.searchType |\r\n                  QueryChangeSpecifications.uiLanguageCode;\r\n    }\r\n}\r\n"]}