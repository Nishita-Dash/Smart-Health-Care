import { BaseSettings, IBaseSettings } from "../Common";
import { ICategories } from "../Data";
import { CategorizeTriggers } from "./CategorizeTriggers";
import { CategoryPresentationMap } from "../Common/CategoryPresentation";
export interface ICategorizeSettings extends IBaseSettings<ICategories> {
    /**
     * This is the separator-character that is used when comparing the clientCategoryFilter. You need to use this
     * to join categoryName arrays in the filter section. See [[SearchClient.clientCategoryFilter]].
     */
    clientCategoryFilterSepChar?: string;
    /**
     * The trigger-settings for when automatic category-updates are to be triggered.
     */
    triggers?: CategorizeTriggers;
    /**
     * Settings that dictate the presentation of the categories.
     */
    presentations?: CategoryPresentationMap;
}
/**
 * These are all the settings that can affect the returned categories for categorize() lookups.
 */
export declare class CategorizeSettings extends BaseSettings<ICategories> {
    /**
     * This is the separator-character that is used when comparing the clientCategoryFilter. You need to use this
     * to join categoryName arrays in the filter section. See [[SearchClient.clientCategoryFilter]].
     */
    /**
     * The trigger-settings for when automatic category result-updates are to be triggered.
     */
    triggers: CategorizeTriggers;
    /**
     * Settings that dictate the presentation of the categories.
     */
    presentations?: CategoryPresentationMap;
    /**
     * Creates an instance of CategorizeSettings, based on CategorizeSettings defaults and the overrides provided as a param.
     * @param settings - The settings defined here will override the default CategorizeSettings.
     */
    constructor(settings: ICategorizeSettings | string);
}
