{"version":3,"file":"BaseCall.js","sourceRoot":"","sources":["../../../src/Common/BaseCall.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,aAAa,CAAC;AAUhC,OAAO,EAAE,yBAAyB,EAAE,MAAM,6BAA6B,CAAC;AAYxE;;;;GAIG;AACH;IAAA;IAuRA,CAAC;IA5PG;;;;;OAKG;IACI,+BAAY,GAAnB,UAAoB,KAAc,EAAE,WAA4B;QAA5B,4BAAA,EAAA,mBAA4B;QAC5D,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,aAAa,EAAE;YAC9B,IAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC;YACjC,IAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC;YAC/C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;YACjC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;gBACrC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;aAC1C;SACJ;IACL,CAAC;IAKD,sBAAI,sCAAgB;QAHpB;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;;;OAAA;IAED;;;;OAIG;IACI,gCAAa,GAApB,UACI,0BAA0C;QAA1C,2CAAA,EAAA,iCAA0C;QAE1C,IAAM,OAAO,GAAQ;YACjB,cAAc,EAAE,kBAAkB;SACrC,CAAC;QAEF,IACI,0BAA0B;YAC1B,IAAI,CAAC,IAAI;YACT,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAC/B;YACE,OAAO,CAAC,aAAa,GAAG,YAAU,IAAI,CAAC,IAAI,CAAC,mBAAqB,CAAC;SACrE;QAED,OAAO;YACH,KAAK,EAAE,SAAS;YAChB,WAAW,EAAE,SAAS;YACtB,OAAO,SAAA;YACP,MAAM,EAAE,KAAK;YACb,IAAI,EAAE,MAAM;SACA,CAAC;IACrB,CAAC;IAED;;;;;;OAMG;IACI,yBAAM,GAAb,UACI,KAAa,EACb,KAAc,EACd,iBAA2B;QAH/B,iBA+BC;QA1BG,IAAI,CAAC,iBAAiB,EAAE;YACpB,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC;SACvB;QACD,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,sFAAsF;YACtF,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;YAC3B,IAAI,CAAC,oBAAoB,GAAG,iBAAiB,CAAC;SACjD;aAAM;YACH,4GAA4G;YAC5G,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEzB,IAAI,KAAK,GAAG,CAAC,EAAE;gBACX,mBAAmB;gBACnB,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC;oBACpB,IAAI,YAAY,GAAG,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACrC,IAAI,YAAY,EAAE;wBACd,YAAY,CAAC,KAAK,CAAC,UAAA,KAAK,IAAI,OAAA,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAArB,CAAqB,CAAC,CAAC;qBACtD;gBACL,CAAC,EAAE,KAAK,CAAQ,CAAC;aACpB;iBAAM;gBACH,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACrC,IAAI,YAAY,EAAE;oBACd,YAAY,CAAC,KAAK,CAAC,UAAA,KAAK,IAAI,OAAA,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAArB,CAAqB,CAAC,CAAC;iBACtD;aACJ;SACJ;IACL,CAAC;IAEM,+BAAY,GAAnB,UAAoB,SAAkB,EAAE,KAAc;QAClD,IACI,IAAI,CAAC,QAAQ,CAAC,SAAS;YACvB,IAAI,CAAC,QAAQ,CAAC,OAAO;YACrB,SAAS;YACT,KAAK,EACP;YACE,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;SAC1C;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;IAC5D,CAAC;IAEM,kCAAe,GAAtB,UAAuB,QAAgB,EAAE,KAAa;QAClD,8BAA8B;IAClC,CAAC;IACM,4CAAyB,GAAhC,UACI,QAA4B,EAC5B,KAAa;QAEb,8BAA8B;IAClC,CAAC;IACM,kCAAe,GAAtB,UAAuB,QAA2B,EAAE,KAAa;QAC7D,8BAA8B;IAClC,CAAC;IACM,gCAAa,GAApB,UAAqB,QAA2B,EAAE,KAAa;QAC3D,8BAA8B;IAClC,CAAC;IACM,iCAAc,GAArB,UAAsB,QAAkB,EAAE,KAAa;QACnD,8BAA8B;IAClC,CAAC;IACM,8CAA2B,GAAlC,UAAmC,QAAiB,EAAE,KAAa;QAC/D,8BAA8B;IAClC,CAAC;IACM,wDAAqC,GAA5C,UACI,QAAiB,EACjB,KAAa;QAEb,8BAA8B;IAClC,CAAC;IACM,uCAAoB,GAA3B,UAA4B,QAAiB,EAAE,KAAa;QACxD,8BAA8B;IAClC,CAAC;IACM,sCAAmB,GAA1B,UAA2B,QAAiB,EAAE,KAAa;QACvD,8BAA8B;IAClC,CAAC;IACM,mCAAgB,GAAvB,UAAwB,QAAgB,EAAE,KAAa;QACnD,8BAA8B;IAClC,CAAC;IACM,uCAAoB,GAA3B,UAA4B,QAAgB,EAAE,KAAa;QACvD,8BAA8B;IAClC,CAAC;IACM,wCAAqB,GAA5B,UAA6B,QAAgB,EAAE,KAAa;QACxD,8BAA8B;IAClC,CAAC;IACM,mCAAgB,GAAvB,UAAwB,QAAgB,EAAE,KAAa;QACnD,8BAA8B;IAClC,CAAC;IACM,oCAAiB,GAAxB,UAAyB,QAAoB,EAAE,KAAa;QACxD,8BAA8B;IAClC,CAAC;IACM,wCAAqB,GAA5B,UAA6B,QAAgB,EAAE,KAAa;QACxD,8BAA8B;IAClC,CAAC;IAED;;;;;OAKG;IACO,uBAAI,GAAd,UACI,QAAkC,EAClC,IAAgB,EAChB,WAAmB;QAEnB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,WAAW,GAAG,WAAW,IAAI,KAAK,CAAC;IAC5C,CAAC;IAOS,4BAAS,GAAnB,UACI,iBAA0B,EAC1B,GAAW,EACX,OAAoB;QAEpB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAChD;QACD,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,IAAI,CAAC,iBAAiB,EAAE;YAC/C,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC,KAAK,KAAK,CAAC;SAC1D;QACD,oFAAoF;QACpF,OAAO,IAAI,CAAC;IAChB,CAAC;IAES,0BAAO,GAAjB,UACI,iBAA0B,EAC1B,KAAU,EACV,GAAW,EACX,OAAoB;QAEpB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAChD;QACD,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,CAAC,iBAAiB,EAAE;YAC7C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAChC;IACL,CAAC;IACS,4BAAS,GAAnB,UACI,iBAA0B,EAC1B,OAAiB,EACjB,GAAW,EACX,OAAoB;QAEpB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAChD;QACD,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,IAAI,CAAC,iBAAiB,EAAE;YAC/C,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;SACpC;IACL,CAAC;IAES,4BAAS,GAAnB,UACI,iBAA0B,EAC1B,IAAe,EACf,GAAW,EACX,OAAoB;QAEpB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAChD;QACD,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,IAAI,CAAC,iBAAiB,EAAE;YAC/C,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACjC;IACL,CAAC;IAED;;OAEG;IACK,kCAAe,GAAvB,UAAwB,SAAiB,EAAE,KAAa;QACpD,IACI,IAAI,CAAC,QAAQ,CAAC,aAAa;YAC3B,IAAI,CAAC,QAAQ,CAAC,gBAAgB;gBAC1B,yBAAyB,CAAC,SAAS,CAAC,EAC1C;YACE,IAAI,OAAO,GAAG,IAAI,CAAC,UAAU;gBACzB,CAAC,CAAC,CAAE,IAAI,CAAC,UAAoB,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC;gBAC3E,CAAC,CAAC,KAAK,CAAC;YAEZ,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SAChE;IACL,CAAC;IACL,eAAC;AAAD,CAAC,AAvRD,IAuRC","sourcesContent":["import fetch from \"cross-fetch\";\n\nimport { DateSpecification, IQuery, Query } from \"./Query\";\nimport { OrderBy } from \"./OrderBy\";\nimport { SearchType } from \"./SearchType\";\nimport { IBaseSettings } from \"./BaseSettings\";\nimport { AuthToken } from \"../Authentication/AuthToken\";\n\nimport { Filter } from \"./Filter\";\nimport { CategorizationType } from \"./CategorizationType\";\nimport { QueryChangeSpecifications } from \"./QueryChangeSpecifications\";\n\nexport type Fetch = (\n    input?: Request | string,\n    init?: RequestInit\n) => Promise<Response>;\n\nexport interface IWarning {\n    message: string;\n    statusCode: number;\n}\n\n/**\n * A common service base-class for the descending Autocomplete, Categorize and Find classes.\n *\n * @param TDataType Defines the data-type that the descendant service-class needs to return on lookups.\n */\nexport abstract class BaseCall<TDataType> {\n    protected fetchMethod: Fetch;\n\n    protected settings?: IBaseSettings<TDataType>;\n\n    protected auth?: AuthToken;\n\n    protected deferUpdate: boolean;\n\n    protected deferredQuery: IQuery | null;\n\n    protected deferredUseMatchPage: boolean | null;\n\n    protected delay: number;\n\n    /**\n     * The query used for the last fetch operation.\n     * When the actual query is different from this then the UI should reflect that it is\n     * not representative for the current query. It should then call a callback to notify\n     * on this state.\n     * The UI can then decide what to do with the no-longer representative results, for instance:\n     *   - Remove the results)\n     *   - \"Disable\" the results\n     *   - \"Ghost\" the results (but allow operating on them)\n     */\n    protected fetchQuery: IQuery;\n\n    /**\n     * Decides whether an update should be executed or not. Typically used to temporarily turn off update-execution.\n     * When turned back on the second param can be used to indicate whether pending updates should be executed or not.\n     * @param state Turns on or off deferring of updates.\n     * @param skipPending Used to indicate if a pending update is to be executed or skipped when deferring is turned off. The param is ignored for state=true.\n     */\n    public deferUpdates(state: boolean, skipPending: boolean = false) {\n        this.deferUpdate = state;\n        if (!state && this.deferredQuery) {\n            const query = this.deferredQuery;\n            const useMatchPage = this.deferredUseMatchPage;\n            this.deferredQuery = null;\n            this.deferredUseMatchPage = null;\n            if (!skipPending && this.shouldUpdate()) {\n                this.update(query, null, useMatchPage);\n            }\n        }\n    }\n\n    /**\n     * Can be used to check the state of deferUpdates.\n     */\n    get deferUpdateState(): boolean {\n        return this.deferUpdate;\n    }\n\n    /**\n     * Sets up the Request that is to be executed, with headers and auth as needed.\n     *\n     * @param includeAuthorizationHeader Set to false to not include the auth jwt token in the request headers. Default=true\n     */\n    public requestObject(\n        includeAuthorizationHeader: boolean = true\n    ): RequestInit {\n        const headers: any = {\n            \"Content-Type\": \"application/json\"\n        };\n\n        if (\n            includeAuthorizationHeader &&\n            this.auth &&\n            this.auth.authenticationToken\n        ) {\n            headers.Authorization = `Bearer ${this.auth.authenticationToken}`;\n        }\n\n        return {\n            cache: \"default\",\n            credentials: \"include\",\n            headers,\n            method: \"GET\",\n            mode: \"cors\"\n        } as RequestInit;\n    }\n\n    /**\n     * Call the service, but take into account deferredUpdates.\n     *\n     * @param query The query object to create the fetch for.\n     * @param delay A delay for when to execute the update, in milliseconds. Defaults to undefined.\n     * @param useQueryMatchPage If true then the query matchpage number will not be reset to 1. Otherwise it is by default always 1.\n     */\n    public update(\n        query: IQuery,\n        delay?: number,\n        useQueryMatchPage?: boolean\n    ): void {\n        if (!useQueryMatchPage) {\n            query.matchPage = 1;\n        }\n        if (this.deferUpdate) {\n            // Save the query, so that when the deferUpdate is again false we can then execute it.\n            this.deferredQuery = query;\n            this.deferredUseMatchPage = useQueryMatchPage;\n        } else {\n            // In case this action is triggered when a delayed execution is already pending, clear that pending timeout.\n            clearTimeout(this.delay);\n\n            if (delay > 0) {\n                // Set up the delay\n                this.delay = setTimeout(() => {\n                    let fetchPromise = this.fetch(query);\n                    if (fetchPromise) {\n                        fetchPromise.catch(error => Promise.resolve(null));\n                    }\n                }, delay) as any;\n            } else {\n                let fetchPromise = this.fetch(query);\n                if (fetchPromise) {\n                    fetchPromise.catch(error => Promise.resolve(null));\n                }\n            }\n        }\n    }\n\n    public shouldUpdate(fieldName?: string, query?: IQuery): boolean {\n        if (\n            this.settings.cbSuccess &&\n            this.settings.enabled &&\n            fieldName &&\n            query\n        ) {\n            this.outdatedWarning(fieldName, query);\n        }\n        return this.settings.cbSuccess && this.settings.enabled;\n    }\n\n    public clientIdChanged(oldValue: string, query: IQuery): void {\n        /* Default no implementation*/\n    }\n    public categorizationTypeChanged(\n        oldValue: CategorizationType,\n        query: IQuery\n    ): void {\n        /* Default no implementation*/\n    }\n    public dateFromChanged(oldValue: DateSpecification, query: IQuery): void {\n        /* Default no implementation*/\n    }\n    public dateToChanged(oldValue: DateSpecification, query: IQuery): void {\n        /* Default no implementation*/\n    }\n    public filtersChanged(oldValue: Filter[], query: IQuery): void {\n        /* Default no implementation*/\n    }\n    public matchGenerateContentChanged(oldValue: boolean, query: IQuery): void {\n        /* Default no implementation*/\n    }\n    public matchGenerateContentHighlightsChanged(\n        oldValue: boolean,\n        query: IQuery\n    ): void {\n        /* Default no implementation*/\n    }\n    public matchGroupingChanged(oldValue: boolean, query: IQuery): void {\n        /* Default no implementation*/\n    }\n    public matchOrderByChanged(oldValue: OrderBy, query: IQuery): void {\n        /* Default no implementation*/\n    }\n    public matchPageChanged(oldValue: number, query: IQuery): void {\n        /* Default no implementation*/\n    }\n    public matchPageSizeChanged(oldValue: number, query: IQuery): void {\n        /* Default no implementation*/\n    }\n    public maxSuggestionsChanged(oldValue: number, query: IQuery): void {\n        /* Default no implementation*/\n    }\n    public queryTextChanged(oldValue: string, query: IQuery): void {\n        /* Default no implementation*/\n    }\n    public searchTypeChanged(oldValue: SearchType, query: IQuery): void {\n        /* Default no implementation*/\n    }\n    public uiLanguageCodeChanged(oldValue: string, query: IQuery): void {\n        /* Default no implementation*/\n    }\n\n    /**\n     * Sets up a the common base handling for services, such as checking that the url is valid and handling the authentication.\n     *\n     * @param settings - The base url for the service to be setup.\n     * @param auth - The auth-object that controls authentication for the service.\n     */\n    protected init(\n        settings: IBaseSettings<TDataType>,\n        auth?: AuthToken,\n        fetchMethod?: Fetch\n    ) {\n        this.settings = settings;\n        this.auth = auth;\n        this.fetchMethod = fetchMethod || fetch;\n    }\n\n    protected abstract fetch(\n        query?: IQuery,\n        suppressCallbacks?: boolean\n    ): Promise<any>;\n\n    protected cbRequest(\n        suppressCallbacks: boolean,\n        url: string,\n        reqInit: RequestInit\n    ): boolean {\n        if (!this.settings) {\n            throw new Error(\"Settings cannot be empty.\");\n        }\n        if (this.settings.cbRequest && !suppressCallbacks) {\n            return this.settings.cbRequest(url, reqInit) !== false;\n        }\n        // If no request-callback is set up we return true to allow the fetch to be executed\n        return true;\n    }\n\n    protected cbError(\n        suppressCallbacks: boolean,\n        error: any,\n        url: string,\n        reqInit: RequestInit\n    ): void {\n        if (!this.settings) {\n            throw new Error(\"Settings cannot be empty.\");\n        }\n        if (this.settings.cbError && !suppressCallbacks) {\n            this.settings.cbError(error);\n        }\n    }\n    protected cbWarning(\n        suppressCallbacks: boolean,\n        warning: IWarning,\n        url: string,\n        reqInit: RequestInit\n    ): void {\n        if (!this.settings) {\n            throw new Error(\"Settings cannot be empty.\");\n        }\n        if (this.settings.cbWarning && !suppressCallbacks) {\n            this.settings.cbWarning(warning);\n        }\n    }\n\n    protected cbSuccess(\n        suppressCallbacks: boolean,\n        data: TDataType,\n        url: string,\n        reqInit: RequestInit\n    ): void {\n        if (!this.settings) {\n            throw new Error(\"Settings cannot be empty.\");\n        }\n        if (this.settings.cbSuccess && !suppressCallbacks) {\n            this.settings.cbSuccess(data);\n        }\n    }\n\n    /**\n     * Checks whether or not to notify that the results are invalidated (no longer representative for the query).\n     */\n    private outdatedWarning(fieldName: string, query: IQuery) {\n        if (\n            this.settings.cbResultState &&\n            this.settings.queryChangeSpecs &\n                QueryChangeSpecifications[fieldName]\n        ) {\n            let invalid = this.fetchQuery\n                ? !(this.fetchQuery as Query).equals(query, this.settings.queryChangeSpecs)\n                : false;\n\n            this.settings.cbResultState(invalid, this.fetchQuery, query);\n        }\n    }\n}\n"]}