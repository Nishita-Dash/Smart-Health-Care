{"version":3,"file":"BaseSettings.js","sourceRoot":"","sources":["../../../src/Common/BaseSettings.ts"],"names":[],"mappings":"AAAA,OAAO,cAAc,CAAC;AAyHtB;;;;GAIG;AACH;IAAA;IAmKA,CAAC;IA/CG,sBAAW,6BAAG;QAHd;;WAEG;aACH;YACI,IAAI,KAAK,GAAa,EAAE,CAAC;YACzB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACzB,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACf,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC7B;YACD,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aAChC;YACD,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACnC,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC1B,CAAC;aACD,UAAe,KAAa;YACxB,aAAa;QACjB,CAAC;;;OAHA;IAID;;;;OAIG;IACO,2BAAI,GAAd,UAAe,QAAkC;QAC7C,IACI,OAAO,QAAQ,CAAC,OAAO,KAAK,WAAW;YACvC,OAAO,QAAQ,CAAC,WAAW,KAAK,WAAW,EAC7C;YACE,MAAM,KAAK,CACP,6DAA6D,CAChE,CAAC;SACL;QACD,IAAI,CAAC,OAAO;YACR,OAAO,QAAQ,CAAC,OAAO,KAAK,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;QAEtE,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAEpD,IAAI,CAAC,QAAQ;YACT,OAAO,QAAQ,CAAC,QAAQ,KAAK,WAAW;gBACpC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC;gBACjD,CAAC,CAAC,gBAAgB,CAAC;QAE3B,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;QAEtE,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;QACpC,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;QAChC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;QACpC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;QACpC,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC;IAChD,CAAC;IACL,mBAAC;AAAD,CAAC,AAnKD,IAmKC","sourcesContent":["import 'url-polyfill';\nimport { QueryChangeSpecifications } from './QueryChangeSpecifications';\nimport { IQuery } from './Query';\nimport { IWarning } from './BaseCall';\n\nexport interface IBaseSettings<TDataType> {\n    /**\n     * A notifier method to call whenever the lookup fails.\n     * It is recommended to issue a clear and visible error to the user when this method is called, as there will be no results.\n     *\n     * The callback exists for all services (Authentication, Autocomplete, Find and Categorize), but the severity of an error is\n     * very different for each of them:\n     *\n     * - Authentication (severity = 3):\n     *   This should not happen if authentication is not enabled. If it is and this fails, then the user should be notified about\n     *   the issue, as this might reduce the number of results they see (if any at all).\n     *\n     * - Autocomplete (severity = 1):\n     *   Getting an error during autocomplete is not something that you want to inform the user about. A small warning in the\n     *   console log would probably be perfect.\n     *\n     * - Find (severity = 3):\n     *   Getting an error for this call is something that the user should be made aware of. You don't have to tell all the\n     *   details, but you should make it clear to the user that the reason they have no matches is that an error occurred.\n     *   Otherwise they might start speculating in why there are no results on screen, and in worst case scenario they might\n     *   think that the query yielded 0 matches, which is potentially and probably not the truth.\n     *\n     * - Categorize (severity = 2):\n     *   Errors while querying for categories are considered important, but less important than the Find errors. The reason\n     *   is that the categories themselves are normally not the end-results that the user is waiting for. They are \"meta\" to the\n     *   actual matches, and they are also a tool to help the user narrow down on the results, helping them find the data they\n     *   are looking for.\n     *\n     * @param error - An error object as given by the fetch operation.\n     */\n    cbError?: (error?: any) => void;\n\n    /**\n     * A notifier method to call when the lookup succeeds, but the received data from the backend indicates a problem.\n     * Note that although this callback can be defined in the settings for all services (Authentication, Autocomplete, Find and\n     * Categorize), only Find and Categorize uses it.\n     *\n     * It is recommended to show these messages as complementary information to the user. Data was received and most likely the\n     * user can see results on their screen. There might however be scenarios were the data could somehow be i.e. incomplete.\n     *\n     * For instance: Consider a situation where the backend search is scaled and uses multiple nodes without replicas. If some\n     * of the nodes respond, while one or more doesn't then the results are partial. This will be notified using this method.\n     * For that scenario, an explanation at a strategic location in the UI would help the user understand that the results may\n     * not be complete. Depending on the search query used, the results *could* be complete, as the node(s) that didn't respond\n     * might not have any matching results anyway. Hence - the user should be warned that the data *may* be incomplete.\n     *\n     * @param warning - A warning object containing a message and a statusCode.\n     */\n    cbWarning?: (warning?: IWarning) => void;\n\n    /**\n     * A notifier method that is called just before the fetch operation is started. When the request\n     * is finished either cbSuccess or cbError will be called to indicate success or failure.\n     * This callback is typically used for setting loading indicators and/or debugging purposes.\n     *\n     * Note: If the callback returns false then the fetch operation is skipped. This can then be used\n     * to conditionally drop requests from being made.\n     *\n     * @param url - This is the url that is/was fetched. Good for debugging purposes.\n     * @param reqInit - This is the RequestInit object that was used for the fetch operation.\n     */\n    cbRequest?: (url?: string, reqInit?: RequestInit) => boolean;\n\n    /**\n     * A notifier method that is called whenever the lookup results have been received.\n     *\n     * @param data - The lookup results.\n     */\n    cbSuccess?: (data?: TDataType) => void;\n\n    /**\n     * A notifier method that is called whenever significant parts of the query has changed, and due to trigger settings, new results has yet not been requested.\n     * When called the UI could/should indicate that the results are invalid. This can be removing the results, showing them \"greyed out\", etc.\n     * The state is valid until the next cbRequest, cbSuccess or cbError is called.\n     *\n     * @param invalid - This indicates if the state-notification is invalid or not\n     * @param fetchedQuery - This is the query that was used to create the current results.\n     * @param futureQuery - This is the query that has not yet resulted in an update of the results.\n     */\n    cbResultState?: (\n        invalid: boolean,\n        fetchedQuery: IQuery,\n        futureQuery: IQuery,\n    ) => void;\n\n    /**\n     * Whether or not this setting-feature is enabled or not.\n     */\n    enabled?: boolean;\n\n    /**\n     * The baseUrl for the rest-service.\n     */\n    baseUrl?: string;\n\n    /**\n     * You can use this path to override the path to the rest-service.\n     * If not set, it will default to \"RestService/v\" and whatever `this.version` is set to.\n     * If it is set it will use the set path verbatim, without appending `this.version`.\n     */\n\n    basePath?: string;\n\n    /**\n     * The service-specific path added to the base-path.\n     */\n    servicePath?: string;\n\n    /**\n     * Defines the enum bit-field flags that signifies which query-fields that may resolve in changed results (both Categorize and Find).\n     */\n    queryChangeSpecs?: QueryChangeSpecifications;\n\n    url?: string;\n}\n\n/**\n * A common settings base-class for the descending Autocomplete, Categorize and Find settings classes.\n *\n * @param TDataType Defines the data-type that the descendant settings-class needs to return on lookups.\n */\nexport abstract class BaseSettings<TDataType>\n    implements IBaseSettings<TDataType> {\n    /**\n     * A notifier method to call whenever the lookup fails.\n     * It is recommended to issue a clear and visible error to the user when this method is called, as there will be no results.\n     *\n     * The callback exists for all services (Authentication, Autocomplete, Find and Categorize), but the severity of an error is\n     * very different for each of them:\n     *\n     * - Authentication (severity = 3):\n     *   This should not happen if authentication is not enabled. If it is and this fails, then the user should be notified about\n     *   the issue, as this might reduce the number of results they see (if any at all).\n     *\n     * - Autocomplete (severity = 1):\n     *   Getting an error during autocomplete is not something that you want to inform the user about. A small warning in the\n     *   console log would probably be perfect.\n     *\n     * - Find (severity = 3):\n     *   Getting an error for this call is something that the user should be made aware of. You don't have to tell all the\n     *   details, but you should make it clear to the user that the reason they have no matches is that an error occurred.\n     *   Otherwise they might start speculating in why there are no results on screen, and in worst case scenario they might\n     *   think that the query yielded 0 matches, which is potentially and probably not the truth.\n     *\n     * - Categorize (severity = 2):\n     *   Errors while querying for categories are considered important, but less important than the Find errors. The reason\n     *   is that the categories themselves are normally not the end-results that the user is waiting for. They are \"meta\" to the\n     *   actual matches, and they are also a tool to help the user narrow down on the results, helping them find the data they\n     *   are looking for.\n     *\n     * @param error - An error object as given by the fetch operation.\n     */\n    public cbError?: (error?: any) => void;\n\n    /**\n     * A notifier method to call when the lookup succeeds, but the received data from the backend indicates a problem.\n     * Note that although this callback can be defined in the settings for all services (Authentication, Autocomplete, Find and\n     * Categorize), only Find and Categorize uses it.\n     *\n     * It is recommended to show these messages as complementary information to the user. Data was received and most likely the\n     * user can see results on their screen. There might however be scenarios were the data could somehow be i.e. incomplete.\n     *\n     * For instance: Consider a situation where the backend search is scaled and uses multiple nodes without replicas. If some\n     * of the nodes respond, while one or more doesn't then the results are partial. This will be notified using this method.\n     * For that scenario, an explanation at a strategic location in the UI would help the user understand that the results may\n     * not be complete. Depending on the search query used, the results *could* be complete, as the node(s) that didn't respond\n     * might not have any matching results anyway. Hence - the user should be warned that the data *may* be incomplete.\n     *\n     * @param warning - A warning object containing a message and a statusCode.\n     */\n    cbWarning?: (warning?: IWarning) => void;\n\n    /**\n     * A notifier method that is called just before the fetch operation is started. When the request\n     * is finished either cbSuccess or cbError will be called to indicate success or failure.\n     * This callback is typically used for setting loading indicators and/or debugging purposes.\n     *\n     * Note: If the callback returns false then the fetch operation is skipped. This can then be used\n     * to conditionally drop requests from being made.\n     *\n     * @param url - This is the url that is/was fetched. Good for debugging purposes.\n     * @param reqInit - This is the RequestInit object that was used for the fetch operation.\n     */\n    public cbRequest?: (url?: string, reqInit?: RequestInit) => boolean;\n\n    /**\n     * A notifier method that is called whenever the lookup results have been received.\n     *\n     * @param data - The lookup results.\n     */\n    public cbSuccess?: (data?: TDataType) => void;\n\n    /**\n     * A notifier method to call whenever significant parts of the query has changed, and due to trigger settings, new results has yet not been requested.\n     * When called the UI could/should indicate that the results are invalid. This can be removing the results, showing them \"greyed out\", etc.\n     * The state is valid until the next cbRequest, Success or cbError is called.\n     *\n     * @param valid - This indicates if the queries passed are equal or not.\n     * @param fetchedQuery - This is the query that was used to create the current results.\n     * @param futureQuery - This is the query that has not yet resulted in an update of the results.\n     */\n    cbResultState?: (\n        valid: boolean,\n        fetchedQuery: IQuery,\n        futureQuery: IQuery,\n    ) => void;\n\n    /**\n     * Whether or not this setting-feature is enabled or not.\n     */\n    public enabled: boolean;\n\n    /**\n     * The baseUrl for the rest-service.\n     */\n    public baseUrl: string;\n\n    /**\n     * You can use this path to override the path to the rest-service.\n     * If not set, it will default to \"RestService/v4\".\n     */\n\n    public basePath: string;\n\n    /**\n     * The service-specific path added to the base-path.\n     */\n    public servicePath: string;\n\n    /**\n     * Defines the enum bit-field flags that signifies which query-fields that may resolve in changed results (both Categorize and Find).\n     */\n    public queryChangeSpecs: QueryChangeSpecifications;\n\n    /**\n     * Returns the actual url for the service.\n     */\n    public get url(): string {\n        let parts: string[] = [];\n        parts.push(this.baseUrl);\n        if (this.basePath) {\n            parts.push(this.basePath);\n        }\n        if (this.servicePath) {\n            parts.push(this.servicePath);\n        }\n        let url = new URL(parts.join('/'));\n        return url.toString();\n    }\n    public set url(value: string) {\n        // Do nothing\n    }\n    /**\n     * Handles the construction of the base-settings class with its properties.\n     *\n     * @param settings The settings that are to be set up for the base settings class.\n     */\n    protected init(settings: IBaseSettings<TDataType>): void {\n        if (\n            typeof settings.baseUrl === 'undefined' ||\n            typeof settings.servicePath === 'undefined'\n        ) {\n            throw Error(\n                'Must have settings, with baseUrl, basePath and servicePath.',\n            );\n        }\n        this.enabled =\n            typeof settings.enabled !== 'undefined' ? settings.enabled : true;\n\n        this.baseUrl = settings.baseUrl.replace(/\\/+$/, '');\n\n        this.basePath =\n            typeof settings.basePath !== 'undefined'\n                ? settings.basePath.replace(/(^\\/+)|(\\/+$)/g, '')\n                : 'RestService/v4';\n\n        this.servicePath = settings.servicePath.replace(/(^\\/+)|(\\/+$)/g, '');\n\n        this.cbWarning = settings.cbWarning;\n        this.cbError = settings.cbError;\n        this.cbRequest = settings.cbRequest;\n        this.cbSuccess = settings.cbSuccess;\n        this.cbResultState = settings.cbResultState;\n    }\n}\n"]}