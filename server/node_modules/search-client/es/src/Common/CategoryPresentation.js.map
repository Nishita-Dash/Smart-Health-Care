{"version":3,"file":"CategoryPresentation.js","sourceRoot":"","sources":["../../../src/Common/CategoryPresentation.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Defines a dictionary type for mapping CategoryPresentation objects using a string, typically a\r\n * pipe-concatenated list of categoryNames as a string.\r\n */\r\nexport type CategoryPresentationMap = {\r\n    [categoryNames: string]: CategoryPresentation;\r\n};\r\n\r\n/**\r\n * The configuration describes how the specific node is to be filtered, sorted, and/or grouped.\r\n * Applied in this order:\r\n * - grouping: Grouping might change all items on this level (introduces an extra layer).\r\n *             If an extra group-level is introduced then it will be subject for all\r\n *             consecutive processes in this class.\r\n * - filter: Reduces which child-categories that passes through based on filter.\r\n * - sorting: Changes the order of the categories.\r\n * - limit: Limits the no of categories to display.\r\n * - expanded: If any categories are left to be shown then this setting indicates whether or not\r\n *             to show the categories in the UI. Note that this is not available for the root-\r\n *             level node, as it always shows the first-level of category-nodes.\r\n *\r\n * @default - All features disabled.\r\n */\r\nexport class CategoryPresentation {\r\n    /**\r\n     * Used to create an extra level of categories that group items together. Default: Disabled\r\n     */\r\n    public group?: GroupConfiguration;\r\n\r\n    /**\r\n     * Used to include only categories that match the provided filter (regex + minCount). Default: Disabled\r\n     */\r\n    public filter?: FilterConfiguration;\r\n\r\n    /**\r\n     * Used to change the order of the categories. Default: Disabled\r\n     */\r\n    public sort?: SortConfiguration;\r\n\r\n    /**\r\n     * Used to limit the number of items to display. Default: Disabled\r\n     */\r\n    public limit?: LimitPageConfiguration;\r\n\r\n    /**\r\n     * Used to indicate whether tho show category-children or not. Default: undefined (N/A for the root-element)\r\n     * Default: null\r\n     */\r\n    public expanded?: boolean | null;\r\n\r\n    /**\r\n     * Creates a CategoryPresentation instance. Default: All features disabled.\r\n     * @param settings A CategoryPresentation object describing the behavior\r\n     */\r\n    constructor(settings?: CategoryPresentation) {\r\n        settings = settings || ({} as CategoryPresentation);\r\n        this.expanded =\r\n            typeof settings.expanded !== \"undefined\" ? settings.expanded : null;\r\n        this.group = new GroupConfiguration(settings.group);\r\n        this.filter = new FilterConfiguration(settings.filter);\r\n        this.sort = new SortConfiguration(settings.sort);\r\n        this.limit = new LimitPageConfiguration(settings.limit);\r\n    }\r\n}\r\n\r\n/**\r\n * Defines how grouping is to be applied on a given categories' children\r\n * Can be set to only be executed when the number of child-categories exceeds a given number.\r\n */\r\nexport class GroupConfiguration {\r\n    /**\r\n     * Enables or disables the feature.\r\n     * Default: false\r\n     */\r\n    public enabled?: boolean;\r\n\r\n    /**\r\n     * Only applies grouping when the number of children reaches this number.\r\n     * Default: 20\r\n     */\r\n    public minCount?: number;\r\n\r\n    /**\r\n     * DisplayName or MatchCount.\r\n     * Default: GroupingMode.DisplayName.\r\n     */\r\n    public mode?: GroupingMode;\r\n\r\n    /**\r\n     * The regex to group on.\r\n     * Default: Matches first character /^./\r\n     */\r\n    public match?: RegExp;\r\n\r\n    /**\r\n     * The casing to apply on the match group ($0).\r\n     * Default: Casing.Title\r\n     */\r\n    public matchCase?: Casing;\r\n\r\n    /**\r\n     * Only creates the group when number of matches per group reaches this number.\r\n     * Default: 5\r\n     */\r\n    public minCountPerGroup?: number;\r\n\r\n    /**\r\n     * Creates a GroupingConfiguration instance.\r\n     *\r\n     * @param settings A GroupingPresentation object describing the behavior.\r\n     */\r\n    constructor(settings?: GroupConfiguration) {\r\n        settings = settings || ({} as GroupConfiguration);\r\n        this.enabled =\r\n            typeof settings.enabled !== \"undefined\" ? settings.enabled : false;\r\n        this.minCount =\r\n            typeof settings.minCount !== \"undefined\" ? settings.minCount : 20;\r\n        this.mode =\r\n            typeof settings.mode !== \"undefined\"\r\n                ? (settings.mode as GroupingMode)\r\n                : GroupingMode.DisplayName;\r\n        this.match =\r\n            typeof settings.match !== \"undefined\"\r\n                ? typeof settings.match === \"string\"\r\n                    ? new RegExp(settings.match)\r\n                    : settings.match\r\n                : /^./;\r\n        this.matchCase =\r\n            typeof settings.matchCase !== \"undefined\"\r\n                ? (settings.matchCase as Casing)\r\n                : Casing.Title;\r\n\r\n        this.minCountPerGroup =\r\n            typeof settings.minCountPerGroup !== \"undefined\"\r\n                ? settings.minCountPerGroup\r\n                : 5;\r\n    }\r\n\r\n    public getMatch?(input: string): string {\r\n        let test = this.match.exec(input);\r\n        if (test === null) {\r\n            return null;\r\n        }\r\n        switch (this.matchCase) {\r\n            case Casing.Lower:\r\n                return test[0].toLowerCase();\r\n            case Casing.Upper:\r\n                return test[0].toUpperCase();\r\n            case Casing.Title:\r\n                return (\r\n                    test[0][0].toUpperCase() +\r\n                    test[0].substring(1).toLowerCase()\r\n                );\r\n            case Casing.Unchanged:\r\n            default:\r\n                return test[0];\r\n        }\r\n    }\r\n}\r\n\r\nexport enum GroupingMode {\r\n    DisplayName = \"DisplayName\",\r\n    MatchCount = \"MatchCount\"\r\n}\r\n\r\nexport enum Casing {\r\n    Unchanged = \"Unchanged\",\r\n    Upper = \"Upper\", // UPPER\r\n    Lower = \"Lower\", // lower\r\n    Title = \"Title\" // Title\r\n}\r\n\r\n/**\r\n * Defines how to filter items.\r\n */\r\nexport class FilterConfiguration {\r\n    /**\r\n     * Enables or disables the feature.\r\n     * Default: false\r\n     */\r\n    public enabled?: boolean;\r\n\r\n    /**\r\n     * The current regex match filter, applied on the Name or DisplayName (see matchMode).\r\n     * Default: \"\" (empty - no matches)\r\n     */\r\n    public match?: RegExp;\r\n\r\n    /**\r\n     * The current match-mode for the regex filter.\r\n     * Default: DisplayName\r\n     */\r\n    public matchMode?: MatchMode;\r\n\r\n    /**\r\n     * The maximum no of matches for the category to be included.\r\n     * Default: -1 (disabled)\r\n     */\r\n    public maxMatchCount?: number;\r\n\r\n    /**\r\n     * Hints the UI to show an input box when the number of hits exceeds a given number.\r\n     * Default: 20\r\n     */\r\n    public uiHintShowFilterInputThreshold?: number;\r\n\r\n    /**\r\n     * Creates a FilterConfiguration instance that describes how to filter categories.\r\n     *\r\n     * @param settings A FilterConfiguration object describing the behavior\r\n     */\r\n    constructor(settings?: FilterConfiguration) {\r\n        settings = settings || ({} as FilterConfiguration);\r\n\r\n        this.enabled =\r\n            typeof settings.enabled !== \"undefined\" ? settings.enabled : false;\r\n\r\n        this.match =\r\n            typeof settings.match !== \"undefined\"\r\n                ? typeof settings.match === \"string\"\r\n                    ? new RegExp(settings.match)\r\n                    : settings.match\r\n                : new RegExp(\"\");\r\n\r\n        this.matchMode =\r\n            typeof settings.matchMode !== \"undefined\"\r\n                ? (settings.matchMode as MatchMode)\r\n                : MatchMode.DisplayName;\r\n\r\n        this.maxMatchCount =\r\n            typeof settings.maxMatchCount !== \"undefined\"\r\n                ? settings.maxMatchCount\r\n                : -1; // disabled\r\n\r\n        this.uiHintShowFilterInputThreshold =\r\n            typeof settings.uiHintShowFilterInputThreshold !== \"undefined\"\r\n                ? settings.uiHintShowFilterInputThreshold\r\n                : 20;\r\n    }\r\n}\r\n\r\nexport enum MatchMode {\r\n    Name = \"Name\",\r\n    DisplayName = \"DisplayName\"\r\n}\r\n\r\n/**\r\n * Defines how sorting is to be applied.\r\n * First handles the static strings, then applies the SortPartConfigurations until there are no items left.\r\n * Note: If there are additional items left when done above then these will be added at the bottom in the original sorting order.\r\n */\r\nexport class SortConfiguration {\r\n    /**\r\n     * Defines whether or not to enable sort for this category-level.\r\n     * Default: false\r\n     */\r\n    public enabled?: boolean;\r\n\r\n    /**\r\n     * A list of SortPartConfigurations.\r\n     * Default: Empty list.\r\n     */\r\n    public parts?: SortPartConfiguration[];\r\n\r\n    /**\r\n     * Creates a sort-configuration that defines how to order the items scoped.\r\n     *\r\n     * @param settings A SortConfiguration object that describes the wanted behavior\r\n     */\r\n    constructor(settings?: SortConfiguration) {\r\n        settings = settings || ({} as SortConfiguration);\r\n\r\n        this.enabled =\r\n            typeof settings.enabled !== \"undefined\" ? settings.enabled : false;\r\n\r\n        this.parts =\r\n            typeof settings.parts !== \"undefined\"\r\n                ? this.setupParts(settings.parts)\r\n                : [];\r\n    }\r\n\r\n    private setupParts?(parts: SortPartConfiguration[]) {\r\n        let ok: SortPartConfiguration[] = [];\r\n        for (let s of parts) {\r\n            ok.push(new SortPartConfiguration(s));\r\n        }\r\n        return ok;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines how sorting is to be applied for the given part.\r\n */\r\nexport class SortPartConfiguration {\r\n    /**\r\n     * Defines the match (string or regex) that defines the scope of items to sort.\r\n     * Default: \".*\" (anything)\r\n     */\r\n    public match?: RegExp | string;\r\n\r\n    /**\r\n     * The current match-mode for the regex filter.\r\n     * Default: DisplayName\r\n     */\r\n    public matchMode?: MatchMode;\r\n\r\n    /**\r\n     * Defines the method/field and order to use when sorting.\r\n     * Default: Original\r\n     */\r\n    public sortMethod?: SortMethod;\r\n    /**\r\n     * Creates a sort-part that defines how to order the items scoped.\r\n     *\r\n     * @param settings A SortPartConfiguration object that describes the wanted behavior\r\n     */\r\n    constructor(settings?: SortPartConfiguration) {\r\n        settings = settings || ({} as SortPartConfiguration);\r\n\r\n        this.match =\r\n            typeof settings.match !== \"undefined\" ? settings.match : /.*/;\r\n\r\n        this.matchMode =\r\n            typeof settings.matchMode !== \"undefined\"\r\n                ? (settings.matchMode as MatchMode)\r\n                : MatchMode.DisplayName;\r\n\r\n        this.sortMethod =\r\n            typeof settings.sortMethod !== \"undefined\"\r\n                ? (settings.sortMethod as SortMethod)\r\n                : SortMethod.Original;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines how to sort the part.\r\n *\r\n */\r\nexport enum SortMethod {\r\n    /**\r\n     * Sort in the order received from the server.\r\n     */\r\n    Original = \"Original\",\r\n\r\n    /**\r\n     * Sort Ascending by Name/DisplayName field.\r\n     */\r\n    AlphaAsc = \"AlphaAsc\",\r\n\r\n    /**\r\n     * Sort Descending by Name/DisplayName field.\r\n     */\r\n    AlphaDesc = \"AlphaDesc\",\r\n\r\n    /**\r\n     * Sort Ascending by MatchCount field.\r\n     */\r\n    CountAsc = \"CountAsc\",\r\n\r\n    /**\r\n     * Sort Descending by MatchCount field.\r\n     */\r\n    CountDesc = \"CountDesc\"\r\n}\r\n\r\n/**\r\n * Defines paging parameters for controlling which range of items to show.\r\n * Used to limit the number of items to display.\r\n * The regular use-case is to set a pageSize, which acts as the number of items to show.\r\n * The limit is also designed to allow paging, by changing page from 1 and thus allowing\r\n * paging the categories.\r\n */\r\nexport class LimitPageConfiguration {\r\n    /**\r\n     * Enables or disables the feature.\r\n     * Default: false\r\n     */\r\n    public enabled?: boolean;\r\n\r\n    /**\r\n     * Defines the page to show.\r\n     * Default: 1\r\n     */\r\n    public page?: number;\r\n\r\n    /**\r\n     * Defines the pageSize that with the `page` controls which item-range to show.\r\n     * Default: 5\r\n     */\r\n    public pageSize?: number;\r\n\r\n    /**\r\n     * Hints the ui to show a pager to allow browsing the categories in the node.\r\n     * Default: true\r\n     */\r\n    public uiHintShowPager?: boolean;\r\n\r\n    /**\r\n     * Creates a LimitPageConfiguration instance. Default: Show first page, with 5 items.\r\n     *\r\n     * @param settings A LimitPageConfiguration object that describes the wanted behavior\r\n     */\r\n    constructor(settings?: LimitPageConfiguration) {\r\n        settings = settings || ({} as LimitPageConfiguration);\r\n\r\n        this.enabled =\r\n            typeof settings.enabled !== \"undefined\" ? settings.enabled : false;\r\n\r\n        this.page = typeof settings.page !== \"undefined\" ? settings.page : 1;\r\n\r\n        function setPageSizeThrowOnNegative() {\r\n            if (settings.pageSize < 0) {\r\n                throw new Error(\"limit pageSize cannot be negative\");\r\n            } else {\r\n                return settings.pageSize;\r\n            }\r\n        }\r\n        this.pageSize =\r\n            typeof settings.pageSize !== \"undefined\"\r\n                ? setPageSizeThrowOnNegative()\r\n                : 5;\r\n\r\n        this.uiHintShowPager =\r\n            typeof settings.uiHintShowPager !== \"undefined\"\r\n                ? settings.uiHintShowPager\r\n                : true;\r\n    }\r\n}\r\n"]}