{"version":3,"file":"BaseQueryConverter.js","sourceRoot":"","sources":["../../../src/Common/BaseQueryConverter.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAI5B;IAAA;IA8CA,CAAC;IA7CG;;;;;;OAMG;IACI,mCAAM,GAAb,UAAc,GAAW,EAAE,KAAa;QACpC,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;QAC7C,OAAU,GAAG,SAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC;IACxC,CAAC;IAOS,0CAAa,GAAvB,UAAwB,MAAgB,EAAE,GAAW,EAAE,KAAU;QAC7D,IAAI,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC7B,IAAI,KAAK,EAAE;YACP,MAAM,CAAC,IAAI,CAAI,GAAG,SAAI,kBAAkB,CAAC,KAAK,CAAG,CAAC,CAAC;SACtD;IACL,CAAC;IAES,uCAAU,GAApB,UACI,IAAyD;QAEzD,IAAI,CAAC,IAAI,EAAE;YACP,OAAO,EAAE,CAAC;SACb;QAED,IAAI,UAAkB,CAAC;QACvB,IACI,OAAO,IAAI,KAAK,QAAQ;YACxB,CAAC,CAAC,IAAI,YAAY,MAAM,CAAC;YACzB,CAAC,CAAC,IAAI,YAAY,IAAI,CAAC,EACzB;YACE,UAAU,GAAG,MAAM,EAAE;iBAChB,GAAG,CAAC,IAAI,CAAC;iBACT,WAAW,EAAE,CAAC;SACtB;aAAM;YACH,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;SAC3C;QACD,OAAO,UAAU,CAAC;IACtB,CAAC;IACL,yBAAC;AAAD,CAAC,AA9CD,IA8CC","sourcesContent":["import moment from \"moment\";\r\n\r\nimport { IQuery } from \".\";\r\n\r\nexport abstract class BaseQueryConverter {\r\n    /**\r\n     * Returns the url for the REST API.\r\n     *\r\n     * @param baseUrl is the leading part of the url that is to be generated.\r\n     * @param query is the query that is to be converted into the url.\r\n     * @returns The url to use for fetching the date, represented as a string.\r\n     */\r\n    public getUrl(url: string, query: IQuery): string {\r\n        let params = this.getUrlParams(query).sort();\r\n        return `${url}?${params.join(\"&\")}`;\r\n    }\r\n\r\n    /**\r\n     * Converts the query params to an array of key=value segments.\r\n     */\r\n    protected abstract getUrlParams(query: IQuery): string[];\r\n\r\n    protected addParamIfSet(params: string[], key: string, param: any) {\r\n        let value = param.toString();\r\n        if (value) {\r\n            params.push(`${key}=${encodeURIComponent(value)}`);\r\n        }\r\n    }\r\n\r\n    protected createDate(\r\n        date: Date | string | number | moment.DurationInputObject\r\n    ): string {\r\n        if (!date) {\r\n            return \"\";\r\n        }\r\n\r\n        let dateString: string;\r\n        if (\r\n            typeof date === \"object\" &&\r\n            !(date instanceof String) &&\r\n            !(date instanceof Date)\r\n        ) {\r\n            dateString = moment()\r\n                .add(date)\r\n                .toISOString();\r\n        } else {\r\n            dateString = moment(date).toISOString();\r\n        }\r\n        return dateString;\r\n    }\r\n}\r\n"]}