{"version":3,"file":"Filter.js","sourceRoot":"","sources":["../../../src/Common/Filter.ts"],"names":[],"mappings":"AAOA;;GAEG;AACH;IAII;;;;;;OAMG;IACH,gBAAY,WAAqB,EAAE,QAAmB,EAAE,MAAuB;QAAvB,uBAAA,EAAA,cAAuB;QAC3E,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IACL,aAAC;AAAD,CAAC,AAhBD,IAgBC","sourcesContent":["import { ICategory } from \"../Data\";\r\n\r\nexport interface IFilter {\r\n    displayName?: string[];\r\n    category: ICategory;\r\n    hidden?: boolean;\r\n}\r\n/**\r\n * The Filter interface defines what information is held for a chosen category as a filter.\r\n */\r\nexport class Filter implements IFilter {\r\n    public displayName?: string[];\r\n    public category: ICategory;\r\n    public hidden?: boolean;\r\n    /**\r\n     * Creates a Filter instance, holding the displayName and a copy of the original Category (excluding category.children).\r\n     *\r\n     * @param displayName Holds an array of all displayNames for the path to this category.\r\n     * @param category A copy/reference to the actual category selected (from what was received in the categorize call).\r\n     * @param hidden Whether or not the filter should be included in the category tree.\r\n     */\r\n    constructor(displayName: string[], category: ICategory, hidden: boolean = false) {\r\n        this.displayName = displayName;\r\n        this.category = category;\r\n        this.hidden = hidden;\r\n    }\r\n}\r\n"]}